name: Vayvy GalaxyRDP Ultra ‚Äî Optimized

on:
  workflow_dispatch:

env:
  # ---------------------------
  # CONFIG (edit here or use secrets)
  # ---------------------------
  DISCORD_WEBHOOK: "https://discord.com/api/webhooks/1421078099763789845/u1bE8nK9wIBfMR1pii65HsQqb28BfcF65VMaLzurUGtIoaKeYg1Eb67gLG9aLdWCJ0MM"
  # Prefer put TAILSCALE_AUTH_KEY into repo secrets: secrets.TAILSCALE_AUTH_KEY
  USE_INLINE_TAILSCALE_KEY: "false"
  INLINE_TAILSCALE_AUTH_KEY: ""
  TAILSCALE_VERSION: "1.82.0"

  # RDP creds (you can override here or switch to secrets)
  RDP_USER: "Vayvy"
  RDP_PASSWORD: "Vay2025!"

  # Keepalive / misc
  KEEP_ALIVE_MINUTES: "720"
  KEEP_ALIVE_INTERVAL_SECS: "300"
  ARTIFACT_DIR: "vayvy-artifacts"
  WALLPAPER_WIDTH: "1920"
  WALLPAPER_HEIGHT: "1080"
  WALLPAPER_PATH: "$env:PUBLIC\\Vayvy_galaxyrdp_wallpaper.jpg"
  RDP_PORT: "3389"

jobs:
  vayvy-rdp:
    runs-on: windows-latest
    timeout-minutes: 720

    steps:
      - name: "üì• Checkout (optional)"
        uses: actions/checkout@v4

      - name: "üß∞ Prepare artifact folder"
        shell: pwsh
        run: |
          $d = "$env:ARTIFACT_DIR"
          if (-not (Test-Path $d)) { New-Item -Path $d -ItemType Directory | Out-Null }
          Write-Host "Artifact dir: $d"

      - name: "‚ú® Intro banner"
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host ("=" * 72) -ForegroundColor Cyan
          Write-Host "üåå Vayvy GalaxyRDP Ultra ‚Äî Optimized" -ForegroundColor Green
          Write-Host "Run ID: $env:GITHUB_RUN_ID  ‚Ä¢  Actor: $env:GITHUB_ACTOR" -ForegroundColor Cyan
          Write-Host ("=" * 72) -ForegroundColor Cyan
          Write-Host ""

      - name: "‚öôÔ∏è Configure core RDP settings (enable, NLA off, firewall)"
        shell: pwsh
        run: |
          try {
            Write-Host "----- RDP CONFIG -----"
            # Enable RDP
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force

            # Turn off NLA and prefer SecurityLayer 0 for compatibility (adjust if you need NLA)
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

            # Firewall rule (idempotent)
            $ruleName = "Vayvy-GalaxyRDP-3389"
            & netsh advfirewall firewall delete rule name="$ruleName" 2>$null
            netsh advfirewall firewall add rule name="$ruleName" dir=in action=allow protocol=TCP localport=$env:RDP_PORT profile=any | Out-Null

            # Ensure TermService running
            try {
              Set-Service -Name TermService -StartupType Automatic -ErrorAction Stop
              if ((Get-Service -Name TermService).Status -ne 'Running') {
                Start-Service -Name TermService -ErrorAction Stop
              }
            } catch {
              Write-Host "‚ö†Ô∏è Could not start/restart TermService: $_" -ForegroundColor Yellow
            }

            Write-Host "‚úÖ RDP enabled and firewall rule created (port $env:RDP_PORT)."
          } catch {
            Write-Host "‚ùå RDP config failed: $($_.Exception.Message)" -ForegroundColor Red
            throw
          }

      - name: üßπ Optimize system remove non-essential apps (make RDP snappier)
        shell: pwsh
        run: |
          Write-Host "----- CLEANUP: uninstall common bloat / store apps -----"
          $apps = @(
            "Microsoft.3DBuilder",
            "Microsoft.MSPaint",
            "Microsoft.XboxApp",
            "Microsoft.ZuneMusic",
            "Microsoft.ZuneVideo",
            "Microsoft.BingWeather",
            "Microsoft.GetHelp",
            "Microsoft.Getstarted",
            "Microsoft.MicrosoftOfficeHub",
            "Microsoft.MicrosoftSolitaireCollection",
            "Microsoft.MicrosoftStickyNotes",
            "Microsoft.Microsoft3DViewer",
            "Microsoft.People",
            "Microsoft.SkypeApp",
            "Microsoft.XboxGameOverlay",
            "Microsoft.XboxGamingOverlay",
            "Microsoft.XboxIdentityProvider",
            "Microsoft.XboxSpeechToTextOverlay",
            "Microsoft.YourPhone",
            "Microsoft.MicrosoftTeams",
            "Microsoft.WindowsFeedbackHub"
          )

          foreach ($app in $apps) {
            Write-Host "üóëÔ∏è Trying to remove: $app"
            try {
              Get-AppxPackage -Name $app -AllUsers | Remove-AppxPackage -ErrorAction Stop
              Write-Host "‚úÖ Removed: $app"
            } catch {
              Write-Host ("‚ö†Ô∏è Could not remove {0} - {1}" -f $app, $_.Exception.Message)
            }
          }

          Write-Host "‚ú® Cleanup finished, system should be lighter now!"
          
            Write-Host "----- OPTIMIZING SERVICES -----"

          # Disable telemetry & diagnostics
          Set-Service DiagTrack -StartupType Disabled -ErrorAction SilentlyContinue
          Stop-Service DiagTrack -ErrorAction SilentlyContinue

          # Disable MapsBroker (background maps service)
          Set-Service MapsBroker -StartupType Disabled -ErrorAction SilentlyContinue
          Stop-Service MapsBroker -ErrorAction SilentlyContinue

          # Disable Xbox Live services (kecuali IdentityProvider biar RDP aman)
          'XblAuthManager','XblGameSave','XboxNetApiSvc' | ForEach-Object {
            Write-Host "üõë Disabling service: $_"
            Set-Service $_ -StartupType Disabled -ErrorAction SilentlyContinue
            Stop-Service $_ -ErrorAction SilentlyContinue
          }

          # Disable Windows Update Delivery Optimization
          Set-Service DoSvc -StartupType Disabled -ErrorAction SilentlyContinue
          Stop-Service DoSvc -ErrorAction SilentlyContinue

          Write-Host "‚úÖ Services optimized!"

          Write-Host "----- OPTIMIZING VISUALS -----"

          # Disable animations & transparency for smoother RDP
          Set-ItemProperty "HKCU:\Control Panel\Desktop" "UserPreferencesMask" ([byte[]](0x90,0x12,0x03,0x80,0x10,0x00,0x00,0x00)) -ErrorAction SilentlyContinue
          Set-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" "VisualFXSetting" 2 -ErrorAction SilentlyContinue

          Write-Host "‚ú® Visual tweaks applied!"

      - name: "üë§ Create local RDP user (Vayvy) ‚Äî password fixed"
        shell: pwsh
        run: |
          try {
            Write-Host "----- CREATE RDP USER -----"
            $user = $env:RDP_USER
            $pass = $env:RDP_PASSWORD

            if (Get-LocalUser -Name $user -ErrorAction SilentlyContinue) {
              Write-Host "‚ôªÔ∏è User $user exists ‚Äî removing & recreating for idempotency."
              Remove-LocalUser -Name $user -ErrorAction SilentlyContinue
            }

            $secure = ConvertTo-SecureString $pass -AsPlainText -Force
            New-LocalUser -Name $user -Password $secure -AccountNeverExpires -PasswordNeverExpires -UserMayNotChangePassword:$false -ErrorAction Stop

            Add-LocalGroupMember -Group "Administrators" -Member $user -ErrorAction SilentlyContinue
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user -ErrorAction SilentlyContinue

            # Save creds to artifact (user MUST delete after download)
            $credFile = "$env:ARTIFACT_DIR\creds.txt"
            "USER:$user`nPASSWORD:$pass`nNOTE: remove after retrieval" | Out-File -FilePath $credFile -Encoding UTF8

            Write-Host "üîê User $user created (credentials saved to artifact)."
          } catch {
            Write-Host "‚ùå User creation failed: $($_.Exception.Message)" -ForegroundColor Red
            throw
          }

      - name: "üñºÔ∏è Generate Custom Text Wallpaper (Vayvy watermark & footer)"
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" -ForegroundColor Cyan
          Write-Host "üñºÔ∏è Generating Custom Wallpaper (Vayvy watermark & footer)" -ForegroundColor Green
          Write-Host "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" -ForegroundColor Cyan

          try {
            # Pastikan folder Pictures ada
            $picDir = "$env:USERPROFILE\Pictures"
            if (-not (Test-Path $picDir)) {
              New-Item -ItemType Directory -Path $picDir | Out-Null
            }

            # Load System.Drawing dengan pengecekan
            try { Add-Type -AssemblyName System.Drawing -ErrorAction Stop } 
            catch { throw "System.Drawing not available: $($_.Exception.Message)" }

            # Dimensi wallpaper (default 1920x1080 jika env kosong)
            $width = if ($env:WALLPAPER_WIDTH) { [int]$env:WALLPAPER_WIDTH } else { 1920 }
            $height = if ($env:WALLPAPER_HEIGHT) { [int]$env:WALLPAPER_HEIGHT } else { 1080 }

            $bmp = New-Object System.Drawing.Bitmap $width, $height
            $g = [System.Drawing.Graphics]::FromImage($bmp)
            $g.SmoothingMode = [System.Drawing.Drawing2D.SmoothingMode]::HighQuality
            $g.Clear([System.Drawing.Color]::Black)

            # Main text
            $mainText = "üåå GalaxyRDP Ultra by Vayvy üöÄ"
            $fontMain = New-Object System.Drawing.Font("Consolas", 72, [System.Drawing.FontStyle]::Bold)
            $brushMain = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::Lime)
            $size = $g.MeasureString($mainText, $fontMain)
            $g.DrawString($mainText, $fontMain, $brushMain, ($width-$size.Width)/2, ($height-$size.Height)/2)

            # Watermark (top-right)
            $wmText = "$($env:GITHUB_REPOSITORY) | Run $($env:GITHUB_RUN_ID) | $($env:GITHUB_ACTOR)"
            $wmFont = New-Object System.Drawing.Font("Arial", 18)
            $wmSize = $g.MeasureString($wmText, $wmFont)
            $g.DrawString($wmText, $wmFont, [System.Drawing.Brushes]::Gray, $width-$wmSize.Width-20, 20)

            # Footer (bottom-right)
            $footer = "‚ö° Powered by GitHub Actions"
            $footerFont = New-Object System.Drawing.Font("Arial", 18)
            $footerSize = $g.MeasureString($footer, $footerFont)
            $g.DrawString($footer, $footerFont, [System.Drawing.Brushes]::DarkGray, $width-$footerSize.Width-20, $height-$footerSize.Height-20)

            # Save
            $outPath = "$picDir\galaxyrdp-wallpaper.jpg"
            $bmp.Save($outPath, [System.Drawing.Imaging.ImageFormat]::Jpeg)
            Write-Host "‚úÖ Wallpaper image created: $outPath"

            # Apply wallpaper via registry (fallback aman)
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name Wallpaper -Value $outPath -ErrorAction SilentlyContinue
            rundll32.exe user32.dll, UpdatePerUserSystemParameters ,1 ,True

            Write-Host "‚úÖ Wallpaper applied successfully (or will apply on next login)"
          }
          catch {
            Write-Host "‚ö†Ô∏è Wallpaper generation failed: $($_.Exception.Message)" -ForegroundColor Yellow
          }

          Write-Host "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" -ForegroundColor Cyan
          Write-Host ""

      - name: "üåê Install/Ensure Tailscale (idempotent)"
        shell: pwsh
        run: |
          $log="$env:ARTIFACT_DIR\04-install-tailscale.log"
          try {
            $tsExe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
            if (Test-Path $tsExe) {
              Write-Host "‚úÖ Tailscale already installed."
            } else {
              $ver = $env:TAILSCALE_VERSION
              $msi = Join-Path $env:TEMP "tailscale-$ver.msi"
              $url = "https://pkgs.tailscale.com/stable/tailscale-setup-$ver-amd64.msi"
              Write-Host "‚¨áÔ∏è Downloading $url ..."
              Invoke-WebRequest -Uri $url -OutFile $msi -UseBasicParsing -ErrorAction Stop
              Start-Process msiexec.exe -ArgumentList "/i", "`"$msi`"", "/quiet", "/norestart" -Wait -ErrorAction Stop
              Remove-Item $msi -Force -ErrorAction SilentlyContinue
              Write-Host "‚úÖ Tailscale installed."
            }
            "OK" | Out-File -FilePath $log -Append
          } catch {
            $_ | Out-String | Out-File -FilePath $log -Append
            Write-Host "‚ùå Tailscale install failed: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "üîó Establish Tailscale connection (authkey handling & IP detection)"
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $log = "$env:ARTIFACT_DIR\05-tailscale-up.log"
          try {
            Write-Host "----- TAILSCALE UP -----"
            $tsExe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
            if (-not (Test-Path $tsExe)) { $tsExe = Join-Path ($env:ProgramFiles + " (x86)") "Tailscale\tailscale.exe" }
            if (-not (Test-Path $tsExe)) { throw "tailscale.exe not found" }

            $hostname = "vayvy-runner-$($env:GITHUB_RUN_ID)"

            if ($env:USE_INLINE_TAILSCALE_KEY -eq "true" -and $env:INLINE_TAILSCALE_AUTH_KEY) {
              & $tsExe up --authkey=$env:INLINE_TAILSCALE_AUTH_KEY --hostname=$hostname 2>&1 | Tee-Object -FilePath $log -Append
            } else {
              & $tsExe up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$hostname 2>&1 | Tee-Object -FilePath $log -Append
            }

            Start-Sleep -Seconds 8

            $tailIP = $null; $retries = 0
            while (-not $tailIP -and $retries -lt 12) {
              $raw = & $tsExe ip -4 2>$null
              if ($raw) { $tailIP = ($raw -split "`n" | Where-Object { $_ -match '\d+\.\d+\.\d+\.\d+' }) -join ',' }
              if (-not $tailIP) { Start-Sleep -Seconds 5; $retries++ }
            }

            if (-not $tailIP) { $tailIP = "Unknown" }

            Write-Host "üåç Tailscale IP: $tailIP"
            Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tailIP"
            "TAILSCALE_IP=$tailIP" | Out-File -FilePath $log -Append

            # Ensure firewall rule for RDP
            try { New-NetFirewallRule -DisplayName "Vayvy-Allow-3389" -Direction Inbound -Protocol TCP -LocalPort $env:RDP_PORT -Action Allow -Profile Any -ErrorAction SilentlyContinue } catch {}
          } catch {
            $_ | Out-String | Out-File -FilePath $log -Append
            Write-Host "‚ùå Tailscale up failed: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "üõ† Finalize & Verify RDP via Tailscale"
        shell: pwsh
        run: |
          Write-Host "----- FINAL RDP VALIDATION -----"

          # 1. Pastikan TermService hidup
          try {
            Set-Service -Name TermService -StartupType Automatic -ErrorAction Stop
            if ((Get-Service -Name TermService).Status -ne 'Running') {
              Start-Service -Name TermService -ErrorAction Stop
            }
            Write-Host "‚úÖ TermService running."
          } catch {
            Write-Host "‚ùå Failed to start TermService: $($_.Exception.Message)"
          }

          # 2. Force buka firewall port 3389 (pakai dua metode)
          try {
            netsh advfirewall firewall delete rule name="Allow RDP 3389" 2>$null
            netsh advfirewall firewall add rule name="Allow RDP 3389" dir=in action=allow protocol=TCP localport=3389 profile=any
            New-NetFirewallRule -DisplayName "Allow RDP 3389 TS" -Direction Inbound -LocalPort 3389 -Protocol TCP -Action Allow -Profile Any -ErrorAction SilentlyContinue
            Write-Host "‚úÖ Firewall rules applied."
          } catch {
            Write-Host "‚ö†Ô∏è Firewall config error: $($_.Exception.Message)"
          }

          # 3. Tes port 3389 lokal
          $localCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port 3389 -WarningAction SilentlyContinue
          if ($localCheck.TcpTestSucceeded) {
            Write-Host "‚úÖ Local port 3389 is listening."
          } else {
            Write-Host "‚ùå Local port 3389 NOT listening!"
          }

          # 4. Tes port 3389 via Tailscale IP
          $tsIP = $env:TAILSCALE_IP
          if ($tsIP -and $tsIP -ne "Unknown") {
            $tsCheck = Test-NetConnection -ComputerName $tsIP -Port 3389 -WarningAction SilentlyContinue
            if ($tsCheck.TcpTestSucceeded) {
              Write-Host "‚úÖ RDP via Tailscale ($tsIP:3389) reachable."
              $tsStatus = "Reachable ‚úÖ"
            } else {
              Write-Host "‚ö†Ô∏è RDP via Tailscale ($tsIP:3389) not reachable."
              $tsStatus = "Not reachable ‚ö†Ô∏è"
            }
          } else {
            Write-Host "‚ö†Ô∏è No valid Tailscale IP detected."
            $tsStatus = "Unknown ‚ö†Ô∏è"
          }

          # 5. Kirim hasil ke Discord
          try {
            $hook = $env:DISCORD_WEBHOOK
            if ($hook) {
              $embed = @{
                title = "üõ† Final RDP Validation"
                description = "GalaxyRDP Ultra connectivity check"
                color = 8311585
                fields = @(
                  @{ name = "Service"; value = "TermService: Running ‚úÖ"; inline = $true },
                  @{ name = "Local Port 3389"; value = if ($localCheck.TcpTestSucceeded) { "Listening ‚úÖ" } else { "Not Listening ‚ùå" }; inline = $true },
                  @{ name = "Tailscale RDP"; value = "$tsIP : $tsStatus"; inline = $false }
                )
                footer = @{ text = "Validation @ $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" }
              }
              $payload = @{ username = "Vayvy RDP Bot"; embeds = @($embed) } | ConvertTo-Json -Depth 6
              Invoke-RestMethod -Uri $hook -Method Post -Body $payload -ContentType 'application/json'
              Write-Host "üì° Validation sent to Discord."
            }
          } catch {
            Write-Host "‚ö†Ô∏è Discord validation failed: $($_.Exception.Message)"
          }

      - name: "üì° Minimal system snapshot (OS/CPU/Mem/Disk/PublicIP/Tailscale status)"
        shell: pwsh
        run: |
          $outFile = "$env:ARTIFACT_DIR\07-system.json"
          try {
            $os = Get-CimInstance Win32_OperatingSystem | Select-Object Caption, Version, BuildNumber, LastBootUpTime
            $cpu = (Get-Counter '\\Processor(_Total)\\% Processor Time').CounterSamples.CookedValue
            $memFreeMB = (Get-Counter '\\Memory\\Available MBytes').CounterSamples.CookedValue
            $disks = Get-PSDrive -PSProvider FileSystem | Select-Object Name, @{n='FreeGB';e={[math]::Round($_.Free/1GB,2)}}
            try { $pub = Invoke-RestMethod -Uri "https://ifconfig.me/ip" -TimeoutSec 6 } catch { $pub = "Unknown" }
            $tails = ""
            try { $tails = (& "$env:ProgramFiles\Tailscale\tailscale.exe" status 2>$null) } catch {}
            $obj = [pscustomobject]@{
              Timestamp = (Get-Date).ToUniversalTime().ToString("o")
              Computer = $env:COMPUTERNAME
              OS = $os
              CPUPercent = [math]::Round($cpu,2)
              MemoryFreeMB = [math]::Round($memFreeMB,2)
              Disks = $disks
              PublicIP = $pub
              Tailscale = $tails
            }
            $obj | ConvertTo-Json -Depth 6 | Out-File -FilePath $outFile -Encoding UTF8
            Write-Host "‚úÖ Snapshot saved: $outFile"
          } catch {
            Write-Host "‚ö†Ô∏è Snapshot failed: $($_.Exception.Message)"
          }

      - name: "üîî Discord ‚Äî Notify READY (Vayvy GalaxyRDP Ultra)"
        if: success()
        shell: pwsh
        run: |
          try {
            $hook = $env:DISCORD_WEBHOOK
            if (-not $hook -or $hook -eq "PASTE_YOUR_DISCORD_WEBHOOK_HERE") {
              Write-Host "‚ö†Ô∏è Discord webhook not configured; skipping."
              exit 0
            }

            $ts = if ($env:TAILSCALE_IP) { $env:TAILSCALE_IP } else { "Unknown" }
            $rnd = Get-Random -Minimum 1 -Maximum 6   # pilih 1‚Äì5 style notifikasi

            switch ($rnd) {
              1 {
                $title = "‚úÖ Vayvy GalaxyRDP Ultra ‚Äî Session Ready"
                $desc  = "RDP provisioned. Connect with Tailscale IP for reliable access."
                $color = 5763719 # hijau
                $footer = "Vayvy GalaxyRDP ‚Ä¢ $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
              }
              2 {
                $title = "üöÄ Your RDP is LIVE!"
                $desc  = "‚ú® Powered by Vayvy. Use the credentials below to connect."
                $color = 3447003 # biru
                $footer = "Keep hacking ‚Ä¢ $(Get-Date -Format 'HH:mm:ss')"
              }
              3 {
                $title = "üåå GalaxyRDP Ultra ‚Äî All Systems Go"
                $desc  = "üîê Secure RDP environment provisioned via GitHub Actions."
                $color = 16776960 # kuning
                $footer = "Session generated @ $(Get-Date -Format 'yyyy-MM-dd HH:mm')"
              }
              4 {
                $title = "‚ö° Instant RDP Boost Online"
                $desc  = "Your high-speed RDP is now running. Credentials below üëá"
                $color = 10181046 # ungu
                $footer = "‚ö° Optimized by Vayvy ‚Ä¢ $(Get-Date -Format 'HH:mm')"
              }
              5 {
                $title = "üõ∞Ô∏è Control Center Update"
                $desc  = "GalaxyRDP Ultra node deployed successfully. Access granted."
                $color = 15844367 # oranye
                $footer = "üõ∞Ô∏è Status report ‚Ä¢ $(Get-Date -Format 'yyyy-MM-dd HH:mm')"
              }
            }

            $embed = @{
              title = $title
              description = $desc
              color = $color
              fields = @(
                @{ name = "üë§ User"; value = $env:RDP_USER; inline = $true },
                @{ name = "üîë Password"; value = $env:RDP_PASSWORD; inline = $true },
                @{ name = "üîó Tailscale IP"; value = $ts; inline = $true },
                @{ name = "üîå RDP Port"; value = $env:RDP_PORT; inline = $true },
                @{ name = "üïí Keep-Alive (mins)"; value = $env:KEEP_ALIVE_MINUTES; inline = $true }
              )
              footer = @{ text = $footer }
            }

            $payload = @{
              username = "Vayvy RDP Bot"
              embeds   = @($embed)
            } | ConvertTo-Json -Depth 8

            Invoke-RestMethod -Uri $hook -Method Post -Body $payload -ContentType 'application/json' -ErrorAction Stop
            Write-Host "‚úÖ Discord READY notification sent (variant $rnd)."
          } catch {
            Write-Host "‚ö†Ô∏è Discord notify failed: $($_.Exception.Message)"
          }

      - name: "‚è≥ Keep-Alive Loop (non-blocking)"
        shell: pwsh
        run: |
          $interval = [int]$env:KEEP_ALIVE_INTERVAL_SECS
          if ($interval -le 0) { $interval = 60 }   # default 60 detik
          $end = (Get-Date).AddMinutes([int]$env:KEEP_ALIVE_MINUTES)

          Write-Host "‚è≥ Keep-Alive background job started until $end (interval $interval secs)."

          Start-Job -ScriptBlock {
            param($end, $interval)
            while ((Get-Date) -lt $end) {
              try {
                $os = Get-CimInstance Win32_OperatingSystem -ErrorAction SilentlyContinue
                $cpuLoad = (Get-CimInstance Win32_Processor | Measure-Object -Property LoadPercentage -Average).Average
                if (-not $cpuLoad) { $cpuLoad = 0 }
                $memFree = if ($os) { [math]::Round($os.FreePhysicalMemory / 1024, 2) } else { 0 }

                Write-Output "[Heartbeat] $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') | CPU: $cpuLoad% | FreeMB: $memFree"
              } catch {
                Write-Output "[Heartbeat] $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') | CPU: N/A | FreeMB: N/A"
              }
              Start-Sleep -Seconds $interval
            }
          } -ArgumentList $end, $interval | Out-Null

      - name: "üì¶ Upload artifacts (wallpaper & creds)"
        uses: actions/upload-artifact@v4
        with:
          name: vayvy-artifacts-${{ github.run_id }}
          path: |
            ${{ env.ARTIFACT_DIR }}
            $env:USERPROFILE\Pictures\galaxyrdp-wallpaper.jpg
            $env:USERPROFILE\Pictures\galaxyrdp-wallpaper.jpg

      - name: "üèÅ Finish banner"
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host ("=" * 72) -ForegroundColor Cyan
          Write-Host "üèÅ Vayvy GalaxyRDP ‚Äî Done (or kept alive for configured duration)" -ForegroundColor Green
          Write-Host ("=" * 72) -ForegroundColor Cyan
          Write-Host ""
