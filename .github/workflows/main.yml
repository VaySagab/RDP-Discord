name: Vayvy GalaxyRDP Ultra ‚Äî All-in-One

on:
  workflow_dispatch:

env:
  DISCORD_WEBHOOK: "https://discord.com/api/webhooks/1421078099763789845/u1bE8nK9wIBfMR1pii65HsQqb28BfcF65VMaLzurUGtIoaKeYg1Eb67gLG9aLdWCJ0MM"
  USE_INLINE_TAILSCALE_KEY: "false"
  INLINE_TAILSCALE_AUTH_KEY: ""
  TAILSCALE_VERSION: "1.82.0"

  RDP_USER: "Vayvy"
  RDP_PASSWORD: "Vay2025!"

  KEEP_ALIVE_MINUTES: "720"
  KEEP_ALIVE_INTERVAL_SECS: "300"
  ARTIFACT_DIR: "vayvy-artifacts"
  WALLPAPER_WIDTH: "1920"
  WALLPAPER_HEIGHT: "1080"
  WALLPAPER_PATH: "$env:PUBLIC\\Vayvy_galaxyrdp_wallpaper.jpg"
  RDP_PORT: "3389"

jobs:
  vayvy-rdp:
    runs-on: windows-latest
    timeout-minutes: 720

    steps:
      - name: "üì• Checkout (optional)"
        uses: actions/checkout@v4

      - name: "üß∞ Prepare artifact folder"
        shell: pwsh
        run: |
          $d = "$env:ARTIFACT_DIR"
          if (-not (Test-Path $d)) { New-Item -Path $d -ItemType Directory | Out-Null }
          Write-Host "Artifact dir: $d"

      - name: "‚ú® Intro banner"
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host ("=" * 72) -ForegroundColor Cyan
          Write-Host "üåå Vayvy GalaxyRDP Ultra ‚Äî Unified Provisioner" -ForegroundColor Green
          Write-Host "Run ID: $env:GITHUB_RUN_ID  ‚Ä¢  Actor: $env:GITHUB_ACTOR" -ForegroundColor Cyan
          Write-Host ("=" * 72) -ForegroundColor Cyan
          Write-Host ""

      - name: "üîß Install/Enable RDP & Tailscale (Yanzz-style functions) + optimizations"
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          function Install-RDPAndFirewall {
            Write-Host "=== Install-RDPAndFirewall ==="
            try {
              # Enable RDP
              Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force

              # UserAuthentication=0 disables NLA (safer to turn off for RDP clients that don't support NLA)
              Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
              Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

              # Firewall idempotent rule
              $ruleName = "Vayvy-GalaxyRDP-3389"
              & netsh advfirewall firewall delete rule name="$ruleName" 2>$null
              netsh advfirewall firewall add rule name="$ruleName" dir=in action=allow protocol=TCP localport=$env:RDP_PORT profile=any | Out-Null
              New-NetFirewallRule -DisplayName $ruleName -Direction Inbound -LocalPort $env:RDP_PORT -Protocol TCP -Action Allow -Profile Any -ErrorAction SilentlyContinue

              # Ensure service running
              Set-Service -Name TermService -StartupType Automatic -ErrorAction SilentlyContinue
              if ((Get-Service -Name TermService).Status -ne 'Running') {
                Start-Service -Name TermService -ErrorAction SilentlyContinue
              }

              Write-Host "‚úÖ RDP enabled + firewall configured."
            } catch {
              Write-Host "‚ùå Install-RDPAndFirewall failed: $($_.Exception.Message)" -ForegroundColor Red
              throw
            }
          }

          function Install-TailscaleAndConnect {
            param([string]$AuthKey)

            Write-Host "=== Install-TailscaleAndConnect ==="
            try {
              $tsExe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
              if (-not (Test-Path $tsExe)) {
                $ver = $env:TAILSCALE_VERSION
                $msi = Join-Path $env:TEMP "tailscale-$ver.msi"
                $url = "https://pkgs.tailscale.com/stable/tailscale-setup-$ver-amd64.msi"
                Write-Host "‚¨áÔ∏è Downloading Tailscale $ver ..."
                Invoke-WebRequest -Uri $url -OutFile $msi -UseBasicParsing -ErrorAction Stop
                Start-Process msiexec.exe -ArgumentList "/i", "`"$msi`"", "/quiet", "/norestart" -Wait -ErrorAction Stop
                Remove-Item $msi -Force -ErrorAction SilentlyContinue
                Write-Host "‚úÖ Tailscale installed."
              } else {
                Write-Host "‚úÖ Tailscale already installed ($tsExe)."
              }

              # Bring up Tailscale (prefer secrets.TAILSCALE_AUTH_KEY passed via env)
              $hostname = "vayvy-runner-$($env:GITHUB_RUN_ID)"
              if ($AuthKey -and $AuthKey -ne "") {
                & $tsExe up --authkey=$AuthKey --hostname=$hostname 2>&1 | Write-Host
              } else {
                Write-Host "‚ö†Ô∏è No Tailscale auth key provided; attempting up without key (may require interactive auth)" -ForegroundColor Yellow
                & $tsExe up --hostname=$hostname 2>&1 | Write-Host
              }

              # Wait for IPv4 assignment
              $tailIP = $null; $tries = 0
              while (-not $tailIP -and $tries -lt 12) {
                $raw = & $tsExe ip -4 2>$null
                if ($raw) { $tailIP = ($raw -split "`n" | Where-Object { $_ -match '\d+\.\d+\.\d+\.\d+' }) -join ',' }
                if (-not $tailIP) { Start-Sleep -Seconds 5; $tries++ }
              }
              if (-not $tailIP) { $tailIP = "Unknown" }

              Write-Host "üåç Tailscale IP: $tailIP"
              Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tailIP"
              "TAILSCALE_IP=$tailIP" | Out-File -FilePath "$env:ARTIFACT_DIR\05-tailscale-up.log" -Append

              # Ensure firewall rule for RDP (again)
              try { New-NetFirewallRule -DisplayName "Vayvy-Allow-3389" -Direction Inbound -Protocol TCP -LocalPort $env:RDP_PORT -Action Allow -Profile Any -ErrorAction SilentlyContinue } catch {}
            } catch {
              Write-Host "‚ùå Install-TailscaleAndConnect failed: $($_.Exception.Message)" -ForegroundColor Red
              throw
            }
          }

          function Optimize-System {
            Write-Host "=== Optimize-System: remove bloat, tweak services & visuals ==="
            try {
              # Remove common store apps (best-effort)
              $apps = @(
                "Microsoft.3DBuilder","Microsoft.MSPaint","Microsoft.XboxApp","Microsoft.ZuneMusic","Microsoft.ZuneVideo",
                "Microsoft.BingWeather","Microsoft.GetHelp","Microsoft.Getstarted","Microsoft.MicrosoftOfficeHub",
                "Microsoft.MicrosoftSolitaireCollection","Microsoft.MicrosoftStickyNotes","Microsoft.Microsoft3DViewer",
                "Microsoft.People","Microsoft.SkypeApp","Microsoft.XboxGameOverlay","Microsoft.XboxGamingOverlay",
                "Microsoft.XboxIdentityProvider","Microsoft.XboxSpeechToTextOverlay","Microsoft.YourPhone",
                "Microsoft.MicrosoftTeams","Microsoft.WindowsFeedbackHub"
              )
              foreach ($app in $apps) {
                try { Get-AppxPackage -Name $app -AllUsers | Remove-AppxPackage -ErrorAction Stop; Write-Host "Removed $app" } catch {}
              }

              # Disable telemetry & unnecessary services
              Set-Service DiagTrack -StartupType Disabled -ErrorAction SilentlyContinue; Stop-Service DiagTrack -ErrorAction SilentlyContinue
              Set-Service MapsBroker -StartupType Disabled -ErrorAction SilentlyContinue; Stop-Service MapsBroker -ErrorAction SilentlyContinue

              'XblAuthManager','XblGameSave','XboxNetApiSvc' | ForEach-Object {
                Set-Service $_ -StartupType Disabled -ErrorAction SilentlyContinue
                Stop-Service $_ -ErrorAction SilentlyContinue
              }
              Set-Service DoSvc -StartupType Disabled -ErrorAction SilentlyContinue; Stop-Service DoSvc -ErrorAction SilentlyContinue

              # Visual tweaks for RDP responsiveness (HKCU keys may apply at next session)
              try {
                New-Item -Path HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer -ErrorAction SilentlyContinue | Out-Null
                Set-ItemProperty "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name VisualFXSetting -Value 2 -ErrorAction SilentlyContinue
              } catch {}

              Write-Host "‚úÖ System optimization applied (best-effort)."
            } catch {
              Write-Host "‚ö†Ô∏è Optimize-System encountered errors: $($_.Exception.Message)" -ForegroundColor Yellow
            }
          }

          # === EXECUTE SEQUENCE ===
          Install-RDPAndFirewall
          Optimize-System

          # Choose authkey: prefer secrets, else inline env
          $authKey = $env:TAILSCALE_AUTH_KEY
          if (-not $authKey -or $authKey -eq "") {
            if ($env:USE_INLINE_TAILSCALE_KEY -eq "true" -and $env:INLINE_TAILSCALE_AUTH_KEY) {
              $authKey = $env:INLINE_TAILSCALE_AUTH_KEY
            }
          }

          Install-TailscaleAndConnect -AuthKey $authKey

      - name: "üë§ Create local RDP user (Vayvy) ‚Äî fixed password"
        shell: pwsh
        run: |
          try {
            $user = $env:RDP_USER; $pass = $env:RDP_PASSWORD
            if (Get-LocalUser -Name $user -ErrorAction SilentlyContinue) {
              Write-Host "‚ôªÔ∏è Removing existing user $user"
              Remove-LocalUser -Name $user -ErrorAction SilentlyContinue
            }
            $secure = ConvertTo-SecureString $pass -AsPlainText -Force
            New-LocalUser -Name $user -Password $secure -AccountNeverExpires -PasswordNeverExpires -UserMayNotChangePassword:$false -ErrorAction Stop
            Add-LocalGroupMember -Group "Administrators" -Member $user -ErrorAction SilentlyContinue
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user -ErrorAction SilentlyContinue
            "USER:$user`nPASSWORD:$pass" | Out-File -FilePath "$env:ARTIFACT_DIR\creds.txt" -Encoding UTF8
            Write-Host "üîê User created and creds stored in artifact (delete after download)."
          } catch {
            Write-Host "‚ùå Create user failed: $($_.Exception.Message)" -ForegroundColor Red
            throw
          }

      - name: "üñºÔ∏è Generate Custom Text Wallpaper (Vayvy style)"
        shell: pwsh
        run: |
          Write-Host "=== Generate Wallpaper ==="
          try {
            $picDir = "$env:USERPROFILE\Pictures"
            if (-not (Test-Path $picDir)) { New-Item -ItemType Directory -Path $picDir | Out-Null }

            Add-Type -AssemblyName System.Drawing -ErrorAction Stop

            $width = if ($env:WALLPAPER_WIDTH) { [int]$env:WALLPAPER_WIDTH } else { 1920 }
            $height = if ($env:WALLPAPER_HEIGHT) { [int]$env:WALLPAPER_HEIGHT } else { 1080 }

            $bmp = New-Object System.Drawing.Bitmap $width, $height
            $g = [System.Drawing.Graphics]::FromImage($bmp)
            $g.SmoothingMode = [System.Drawing.Drawing2D.SmoothingMode]::HighQuality

            # Gradient background
            $rect = New-Object System.Drawing.Rectangle 0,0,$width,$height
            $brush = New-Object Drawing.Drawing2D.LinearGradientBrush $rect, [Drawing.Color]::FromArgb(12,12,40), [Drawing.Color]::FromArgb(2,10,20), [Drawing.Drawing2D.LinearGradientMode]::ForwardDiagonal
            $g.FillRectangle($brush, $rect)

            # Main title
            $mainText = "üåå GalaxyRDP Ultra by Vayvy üöÄ"
            $fontMain = New-Object System.Drawing.Font("Segoe UI", 56, [System.Drawing.FontStyle]::Bold)
            $brushMain = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::FromArgb(220,220,255))
            $size = $g.MeasureString($mainText, $fontMain)
            $g.DrawString($mainText, $fontMain, $brushMain, ($width - $size.Width)/2, ($height - $size.Height)/2)

            # Watermark & footer
            $wmText = "$($env:GITHUB_REPOSITORY) | Run $($env:GITHUB_RUN_ID) | $($env:GITHUB_ACTOR)"
            $wmFont = New-Object System.Drawing.Font("Segoe UI", 14)
            $wmSize = $g.MeasureString($wmText, $wmFont)
            $g.DrawString($wmText, $wmFont, [System.Drawing.Brushes]::LightGray, $width - $wmSize.Width - 20, 20)

            $footer = "‚ö° Powered by GitHub Actions"
            $footerFont = New-Object System.Drawing.Font("Segoe UI", 14)
            $footerSize = $g.MeasureString($footer, $footerFont)
            $g.DrawString($footer, $footerFont, [System.Drawing.Brushes]::Gray, $width - $footerSize.Width - 20, $height - $footerSize.Height - 20)

            $outPath = "$picDir\galaxyrdp-wallpaper.jpg"
            $bmp.Save($outPath, [System.Drawing.Imaging.ImageFormat]::Jpeg)
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name Wallpaper -Value $outPath -ErrorAction SilentlyContinue
            rundll32.exe user32.dll, UpdatePerUserSystemParameters ,1 ,True

            Write-Host "‚úÖ Wallpaper saved/applied: $outPath"
          } catch {
            Write-Host "‚ö†Ô∏è Wallpaper generation issue: $($_.Exception.Message)" -ForegroundColor Yellow
          }

      - name: "üîç Finalize & Verify RDP via Tailscale"
        shell: pwsh
        run: |
          Write-Host "----- FINAL RDP VALIDATION -----"
          try {
            # Ensure TermService
            try {
              Set-Service -Name TermService -StartupType Automatic -ErrorAction Stop
              if ((Get-Service -Name TermService).Status -ne 'Running') {
                Start-Service -Name TermService -ErrorAction Stop
              }
              $svcOk = $true
            } catch {
              $svcOk = $false
            }

            # Firewall (double ensure)
            try {
              netsh advfirewall firewall delete rule name="Allow RDP 3389" 2>$null
              netsh advfirewall firewall add rule name="Allow RDP 3389" dir=in action=allow protocol=TCP localport=$env:RDP_PORT profile=any
              New-NetFirewallRule -DisplayName "Allow RDP 3389 TS" -Direction Inbound -LocalPort $env:RDP_PORT -Protocol TCP -Action Allow -Profile Any -ErrorAction SilentlyContinue
            } catch {}

            # Local port test
            $localCheck = Test-NetConnection -ComputerName 127.0.0.1 -Port $env:RDP_PORT -WarningAction SilentlyContinue
            if ($localCheck.TcpTestSucceeded) {
              Write-Host "‚úÖ Local port $env:RDP_PORT is listening."
            } else {
              Write-Host "‚ùå Local port $env:RDP_PORT NOT listening!"
            }

            # Tailscale IP test
            $tsIP = $env:TAILSCALE_IP
            if ($tsIP -and $tsIP -ne "Unknown") {
              $tsCheck = Test-NetConnection -ComputerName $tsIP -Port $env:RDP_PORT -WarningAction SilentlyContinue
              if ($tsCheck.TcpTestSucceeded) {
                Write-Host "‚úÖ RDP via Tailscale ($tsIP:$env:RDP_PORT) reachable."
                $tsStatus = "Reachable ‚úÖ"
              } else {
                Write-Host "‚ö†Ô∏è RDP via Tailscale ($tsIP:$env:RDP_PORT) not reachable."
                $tsStatus = "Not reachable ‚ö†Ô∏è"
              }
            } else {
              Write-Host "‚ö†Ô∏è No valid Tailscale IP detected."
              $tsStatus = "Unknown ‚ö†Ô∏è"
            }

            # Post concise validation to Discord
            try {
              $hook = $env:DISCORD_WEBHOOK
              if ($hook) {
                $embed = @{
                  title = "üõ† Final RDP Validation"
                  description = "GalaxyRDP Ultra connectivity check (auto)"
                  color = 8311585
                  fields = @(
                    @{ name = "TermService"; value = (if ($svcOk) { "Running ‚úÖ" } else { "Not Running ‚ùå" }); inline = $true },
                    @{ name = "Local Port $env:RDP_PORT"; value = (if ($localCheck.TcpTestSucceeded) { "Listening ‚úÖ" } else { "Not Listening ‚ùå" }); inline = $true },
                    @{ name = "Tailscale RDP"; value = ("$tsIP : $tsStatus"); inline = $false },
                    @{ name = "üë§ User"; value = $env:RDP_USER; inline = $true },
                    @{ name = "üîë Password"; value = $env:RDP_PASSWORD; inline = $true }
                  )
                  footer = @{ text = "Validation @ $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" }
                }
                $payload = @{ username = "Vayvy RDP Bot"; embeds = @($embed) } | ConvertTo-Json -Depth 8
                Invoke-RestMethod -Uri $hook -Method Post -Body $payload -ContentType 'application/json' -ErrorAction SilentlyContinue
                Write-Host "üì° Validation posted to Discord."
              }
            } catch {
              Write-Host "‚ö†Ô∏è Discord post failed: $($_.Exception.Message)" -ForegroundColor Yellow
            }
          } catch {
            Write-Host "‚ö†Ô∏è Final validation failed: $($_.Exception.Message)" -ForegroundColor Yellow
          }

      - name: "‚è≥ Keep-Alive Loop (non-blocking/background)"
        shell: pwsh
        run: |
          $interval = [int]$env:KEEP_ALIVE_INTERVAL_SECS
          if ($interval -le 0) { $interval = 60 }
          $end = (Get-Date).AddMinutes([int]$env:KEEP_ALIVE_MINUTES)
          Write-Host "Starting keep-alive job until $end (interval $interval s)."

          Start-Job -ScriptBlock {
            param($end, $interval, $artifactDir, $hook, $runId)
            while ((Get-Date) -lt $end) {
              try {
                $cpu = (Get-CimInstance Win32_Processor | Measure-Object -Property LoadPercentage -Average).Average
                if (-not $cpu) { $cpu = 0 }
                $memFree = (Get-Counter '\\Memory\\Available MBytes').CounterSamples.CookedValue
                $line = "[Heartbeat] $(Get-Date -Format 'o') | CPU: $([math]::Round($cpu,2))% | FreeMB: $([math]::Round($memFree,2))"
                $line | Out-File -FilePath (Join-Path $artifactDir "heartbeat.log") -Append

                # lightweight alert via Discord when extremes (best-effort)
                if ($cpu -gt 95 -or $memFree -lt 150) {
                  if ($hook) {
                    $embed = @{ title="‚ö†Ô∏è Auto-Alert: Resource"; description="Run $runId | CPU: $cpu | FreeMB: $memFree"; color=15548997 }
                    $payload = @{ username="Vayvy RDP Bot"; embeds=@($embed) } | ConvertTo-Json -Depth 4
                    try { Invoke-RestMethod -Uri $hook -Method Post -Body $payload -ContentType "application/json" -ErrorAction SilentlyContinue } catch {}
                  }
                }
              } catch {}
              Start-Sleep -Seconds $interval
            }
          } -ArgumentList $end, $interval, $env:ARTIFACT_DIR, $env:DISCORD_WEBHOOK, $env:GITHUB_RUN_ID | Out-Null

          Write-Host "‚úÖ Keep-alive job started (background)."

      - name: "üì¶ Upload artifacts (wallpaper & creds & logs)"
        uses: actions/upload-artifact@v4
        with:
          name: vayvy-artifacts-${{ github.run_id }}
          path: |
            ${{ env.ARTIFACT_DIR }}
            $env:USERPROFILE\Pictures\galaxyrdp-wallpaper.jpg

      - name: "üèÅ Finish banner"
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host ("=" * 72) -ForegroundColor Cyan
          Write-Host "üèÅ Vayvy GalaxyRDP ‚Äî Workflow finished (or keep-alive running in background)" -ForegroundColor Green
          Write-Host ("=" * 72) -ForegroundColor Cyan
          Write-Host ""
