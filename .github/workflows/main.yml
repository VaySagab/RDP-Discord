name: Vayvy GalaxyRDP Ultra — Optimized

on:
  workflow_dispatch:

env:
  # ---------------------------
  # CONFIG (edit here or use secrets)
  # ---------------------------
  DISCORD_WEBHOOK: "https://discord.com/api/webhooks/1421078099763789845/u1bE8nK9wIBfMR1pii65HsQqb28BfcF65VMaLzurUGtIoaKeYg1Eb67gLG9aLdWCJ0MM"
  # Prefer put TAILSCALE_AUTH_KEY into repo secrets: secrets.TAILSCALE_AUTH_KEY
  USE_INLINE_TAILSCALE_KEY: "false"
  INLINE_TAILSCALE_AUTH_KEY: ""
  TAILSCALE_VERSION: "1.82.0"

  # RDP creds (you can override here or switch to secrets)
  RDP_USER: "Vayvy"
  RDP_PASSWORD: "Vay2025!"

  # Keepalive / misc
  KEEP_ALIVE_MINUTES: "720"
  KEEP_ALIVE_INTERVAL_SECS: "300"
  ARTIFACT_DIR: "vayvy-artifacts"
  WALLPAPER_WIDTH: "1920"
  WALLPAPER_HEIGHT: "1080"
  WALLPAPER_PATH: "$env:PUBLIC\\Vayvy_galaxyrdp_wallpaper.jpg"
  RDP_PORT: "3389"

jobs:
  vayvy-rdp:
    runs-on: windows-latest
    timeout-minutes: 720

    steps:
      - name: "📥 Checkout (optional)"
        uses: actions/checkout@v4

      - name: "🧰 Prepare artifact folder"
        shell: pwsh
        run: |
          $d = "$env:ARTIFACT_DIR"
          if (-not (Test-Path $d)) { New-Item -Path $d -ItemType Directory | Out-Null }
          Write-Host "Artifact dir: $d"

      - name: "✨ Intro banner"
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host ("=" * 72) -ForegroundColor Cyan
          Write-Host "🌌 Vayvy GalaxyRDP Ultra — Optimized" -ForegroundColor Green
          Write-Host "Run ID: $env:GITHUB_RUN_ID  •  Actor: $env:GITHUB_ACTOR" -ForegroundColor Cyan
          Write-Host ("=" * 72) -ForegroundColor Cyan
          Write-Host ""

      - name: "⚙️ Configure core RDP settings (enable, NLA off, firewall)"
        shell: pwsh
        run: |
          try {
            Write-Host "----- RDP CONFIG -----"
            # Enable RDP
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force

            # Turn off NLA and prefer SecurityLayer 0 for compatibility (adjust if you need NLA)
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

            # Firewall rule (idempotent)
            $ruleName = "Vayvy-GalaxyRDP-3389"
            & netsh advfirewall firewall delete rule name="$ruleName" 2>$null
            netsh advfirewall firewall add rule name="$ruleName" dir=in action=allow protocol=TCP localport=$env:RDP_PORT profile=any | Out-Null

            # Ensure TermService running
            try {
              Set-Service -Name TermService -StartupType Automatic -ErrorAction Stop
              if ((Get-Service -Name TermService).Status -ne 'Running') {
                Start-Service -Name TermService -ErrorAction Stop
              }
            } catch {
              Write-Host "⚠️ Could not start/restart TermService: $_" -ForegroundColor Yellow
            }

            Write-Host "✅ RDP enabled and firewall rule created (port $env:RDP_PORT)."
          } catch {
            Write-Host "❌ RDP config failed: $($_.Exception.Message)" -ForegroundColor Red
            throw
          }

      - name: 🧹 Optimize system remove non-essential apps (make RDP snappier)
        shell: pwsh
        run: |
          Write-Host "----- CLEANUP: uninstall common bloat / store apps -----"
          $apps = @(
            "Microsoft.3DBuilder",
            "Microsoft.MSPaint",
            "Microsoft.XboxApp",
            "Microsoft.ZuneMusic",
            "Microsoft.ZuneVideo",
            "Microsoft.BingWeather",
            "Microsoft.GetHelp",
            "Microsoft.Getstarted",
            "Microsoft.MicrosoftOfficeHub",
            "Microsoft.MicrosoftSolitaireCollection",
            "Microsoft.MicrosoftStickyNotes",
            "Microsoft.Microsoft3DViewer",
            "Microsoft.People",
            "Microsoft.SkypeApp",
            "Microsoft.XboxGameOverlay",
            "Microsoft.XboxGamingOverlay",
            "Microsoft.XboxIdentityProvider",
            "Microsoft.XboxSpeechToTextOverlay",
            "Microsoft.YourPhone",
            "Microsoft.MicrosoftTeams",
            "Microsoft.WindowsFeedbackHub"
          )

          foreach ($app in $apps) {
            Write-Host "🗑️ Trying to remove: $app"
            try {
              Get-AppxPackage -Name $app -AllUsers | Remove-AppxPackage -ErrorAction Stop
              Write-Host "✅ Removed: $app"
            } catch {
              Write-Host ("⚠️ Could not remove {0} - {1}" -f $app, $_.Exception.Message)
            }
          }

          Write-Host "✨ Cleanup finished, system should be lighter now!"

      - name: "👤 Create local RDP user (Vayvy) — password fixed"
        shell: pwsh
        run: |
          try {
            Write-Host "----- CREATE RDP USER -----"
            $user = $env:RDP_USER
            $pass = $env:RDP_PASSWORD

            if (Get-LocalUser -Name $user -ErrorAction SilentlyContinue) {
              Write-Host "♻️ User $user exists — removing & recreating for idempotency."
              Remove-LocalUser -Name $user -ErrorAction SilentlyContinue
            }

            $secure = ConvertTo-SecureString $pass -AsPlainText -Force
            New-LocalUser -Name $user -Password $secure -AccountNeverExpires -PasswordNeverExpires -UserMayNotChangePassword:$false -ErrorAction Stop

            Add-LocalGroupMember -Group "Administrators" -Member $user -ErrorAction SilentlyContinue
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user -ErrorAction SilentlyContinue

            # Save creds to artifact (user MUST delete after download)
            $credFile = "$env:ARTIFACT_DIR\creds.txt"
            "USER:$user`nPASSWORD:$pass`nNOTE: remove after retrieval" | Out-File -FilePath $credFile -Encoding UTF8

            Write-Host "🔐 User $user created (credentials saved to artifact)."
          } catch {
            Write-Host "❌ User creation failed: $($_.Exception.Message)" -ForegroundColor Red
            throw
          }

      - name: "🖼️ Generate Custom Text Wallpaper (Vayvy watermark & footer)"
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🖼️ Generating Custom Wallpaper (Vayvy watermark & footer)" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          try {
            Add-Type -AssemblyName System.Drawing
            $width = [int]$env:WALLPAPER_WIDTH; $height = [int]$env:WALLPAPER_HEIGHT
            $bmp = New-Object System.Drawing.Bitmap $width, $height
            $g = [System.Drawing.Graphics]::FromImage($bmp)
            $g.SmoothingMode = [System.Drawing.Drawing2D.SmoothingMode]::HighQuality
            $g.Clear([System.Drawing.Color]::Black)

            # Main text in center
            $mainText = "🌌 GalaxyRDP Ultra by Vayvy 🚀"
            $fontMain = New-Object System.Drawing.Font("Consolas", 72, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Pixel)
            $brushMain = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::Lime)
            $size = $g.MeasureString($mainText, $fontMain)
            $x = ($width - $size.Width) / 2
            $y = ($height - $size.Height) / 2
            $g.DrawString($mainText, $fontMain, $brushMain, $x, $y)

            # Watermark (top-right)
            $wmText = "$($env:GITHUB_REPOSITORY) | Run $($env:GITHUB_RUN_ID) | $($env:GITHUB_ACTOR)"
            $wmFont = New-Object System.Drawing.Font("Arial", 18, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Pixel)
            $wmSize = $g.MeasureString($wmText, $wmFont)
            $wmX = $width - $wmSize.Width - 20
            $wmY = 20
            $g.DrawString($wmText, $wmFont, [System.Drawing.Brushes]::Gray, $wmX, $wmY)

            # Footer (bottom-right)
            $footer = "⚡ Powered by GitHub Actions"
            $footerFont = New-Object System.Drawing.Font("Arial", 18, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Pixel)
            $footerSize = $g.MeasureString($footer, $footerFont)
            $fx = $width - $footerSize.Width - 20
            $fy = $height - $footerSize.Height - 20
            $g.DrawString($footer, $footerFont, [System.Drawing.Brushes]::DarkGray, $fx, $fy)

            # Save and apply
            $outPath = "$env:USERPROFILE\Pictures\galaxyrdp-wallpaper.jpg"
            $bmp.Save($outPath, [System.Drawing.Imaging.ImageFormat]::Jpeg)
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name Wallpaper -Value $outPath
            rundll32.exe user32.dll, UpdatePerUserSystemParameters

            Write-Host "✅ Wallpaper applied successfully (with dynamic watermark & footer)."
          } catch {
            Write-Host "⚠️ Wallpaper generation failed: $_" -ForegroundColor Yellow
          }
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      - name: "🌐 Install/Ensure Tailscale (idempotent)"
        shell: pwsh
        run: |
          $log="$env:ARTIFACT_DIR\04-install-tailscale.log"
          try {
            $tsExe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
            if (Test-Path $tsExe) {
              Write-Host "✅ Tailscale already installed."
            } else {
              $ver = $env:TAILSCALE_VERSION
              $msi = Join-Path $env:TEMP "tailscale-$ver.msi"
              $url = "https://pkgs.tailscale.com/stable/tailscale-setup-$ver-amd64.msi"
              Write-Host "⬇️ Downloading $url ..."
              Invoke-WebRequest -Uri $url -OutFile $msi -UseBasicParsing -ErrorAction Stop
              Start-Process msiexec.exe -ArgumentList "/i", "`"$msi`"", "/quiet", "/norestart" -Wait -ErrorAction Stop
              Remove-Item $msi -Force -ErrorAction SilentlyContinue
              Write-Host "✅ Tailscale installed."
            }
            "OK" | Out-File -FilePath $log -Append
          } catch {
            $_ | Out-String | Out-File -FilePath $log -Append
            Write-Host "❌ Tailscale install failed: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "🔗 Establish Tailscale connection (authkey handling & IP detection)"
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $log = "$env:ARTIFACT_DIR\05-tailscale-up.log"
          try {
            Write-Host "----- TAILSCALE UP -----"
            $tsExe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
            if (-not (Test-Path $tsExe)) { $tsExe = Join-Path ($env:ProgramFiles + " (x86)") "Tailscale\tailscale.exe" }
            if (-not (Test-Path $tsExe)) { throw "tailscale.exe not found" }

            $hostname = "vayvy-runner-$($env:GITHUB_RUN_ID)"

            if ($env:USE_INLINE_TAILSCALE_KEY -eq "true" -and $env:INLINE_TAILSCALE_AUTH_KEY) {
              & $tsExe up --authkey=$env:INLINE_TAILSCALE_AUTH_KEY --hostname=$hostname 2>&1 | Tee-Object -FilePath $log -Append
            } else {
              & $tsExe up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$hostname 2>&1 | Tee-Object -FilePath $log -Append
            }

            Start-Sleep -Seconds 8

            $tailIP = $null; $retries = 0
            while (-not $tailIP -and $retries -lt 12) {
              $raw = & $tsExe ip -4 2>$null
              if ($raw) { $tailIP = ($raw -split "`n" | Where-Object { $_ -match '\d+\.\d+\.\d+\.\d+' }) -join ',' }
              if (-not $tailIP) { Start-Sleep -Seconds 5; $retries++ }
            }

            if (-not $tailIP) { $tailIP = "Unknown" }

            Write-Host "🌍 Tailscale IP: $tailIP"
            Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$tailIP"
            "TAILSCALE_IP=$tailIP" | Out-File -FilePath $log -Append

            # Ensure firewall rule for RDP
            try { New-NetFirewallRule -DisplayName "Vayvy-Allow-3389" -Direction Inbound -Protocol TCP -LocalPort $env:RDP_PORT -Action Allow -Profile Any -ErrorAction SilentlyContinue } catch {}
          } catch {
            $_ | Out-String | Out-File -FilePath $log -Append
            Write-Host "❌ Tailscale up failed: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "🔍 Verify RDP reachability (via Tailscale IP) — non-fatal"
        shell: pwsh
        continue-on-error: true
        run: |
          $log = "$env:ARTIFACT_DIR\06-verify-rdp.log"
          $rdpPort = $env:RDP_PORT
          $tsIP = $env:TAILSCALE_IP
          Write-Host "----- VERIFY RDP (Port $rdpPort) -----"
          if (-not $tsIP -or $tsIP -eq "" -or $tsIP -eq "Unknown") {
            Write-Host "⚠️ No valid Tailscale IP available — skipping reachability test."
            "No valid Tailscale IP, skipped RDP check." | Out-File -FilePath $log -Append
            exit 0
          }

          Write-Host "Testing TCP $tsIP`:$rdpPort ..." -NoNewline
          try {
            $res = Test-NetConnection -ComputerName $tsIP -Port $rdpPort -WarningAction SilentlyContinue -InformationLevel Quiet
            if ($res) {
              Write-Host " ✅ Tailscale reachable"
              "Tailscale ($tsIP`:$rdpPort) reachable ✅" | Out-File -FilePath $log -Append
            } else {
              Write-Host " ⚠️ Tailscale not reachable (ignored)"
              "Tailscale ($tsIP`:$rdpPort) not reachable ⚠️" | Out-File -FilePath $log -Append
            }
          } catch {
            Write-Host " ⚠️ Error testing Tailscale reachability: $($_.Exception.Message)"
            "Error testing reachability: $($_.Exception.Message)" | Out-File -FilePath $log -Append
          }

      - name: "📡 Minimal system snapshot (OS/CPU/Mem/Disk/PublicIP/Tailscale status)"
        shell: pwsh
        run: |
          $outFile = "$env:ARTIFACT_DIR\07-system.json"
          try {
            $os = Get-CimInstance Win32_OperatingSystem | Select-Object Caption, Version, BuildNumber, LastBootUpTime
            $cpu = (Get-Counter '\\Processor(_Total)\\% Processor Time').CounterSamples.CookedValue
            $memFreeMB = (Get-Counter '\\Memory\\Available MBytes').CounterSamples.CookedValue
            $disks = Get-PSDrive -PSProvider FileSystem | Select-Object Name, @{n='FreeGB';e={[math]::Round($_.Free/1GB,2)}}
            try { $pub = Invoke-RestMethod -Uri "https://ifconfig.me/ip" -TimeoutSec 6 } catch { $pub = "Unknown" }
            $tails = ""
            try { $tails = (& "$env:ProgramFiles\Tailscale\tailscale.exe" status 2>$null) } catch {}
            $obj = [pscustomobject]@{
              Timestamp = (Get-Date).ToUniversalTime().ToString("o")
              Computer = $env:COMPUTERNAME
              OS = $os
              CPUPercent = [math]::Round($cpu,2)
              MemoryFreeMB = [math]::Round($memFreeMB,2)
              Disks = $disks
              PublicIP = $pub
              Tailscale = $tails
            }
            $obj | ConvertTo-Json -Depth 6 | Out-File -FilePath $outFile -Encoding UTF8
            Write-Host "✅ Snapshot saved: $outFile"
          } catch {
            Write-Host "⚠️ Snapshot failed: $($_.Exception.Message)"
          }

      - name: "🔔 Discord — Notify READY (includes Tailscale IP & RDP credentials)"
        if: success()
        shell: pwsh
        run: |
          try {
            $hook = $env:DISCORD_WEBHOOK
            if (-not $hook -or $hook -eq "PASTE_YOUR_DISCORD_WEBHOOK_HERE") {
              Write-Host "⚠️ Discord webhook not configured; skipping."
              exit 0
            }
            $ts = $env:TAILSCALE_IP
            if (-not $ts -or $ts -eq "") { $ts = "Unknown" }
            $embed = @{
              title = "✅ Vayvy GalaxyRDP Ultra — Session Ready"
              description = "RDP provisioned. Connect with Tailscale IP for reliable access."
              color = 5763719
              fields = @(
                @{ name = "👤 User"; value = $env:RDP_USER; inline = $true },
                @{ name = "🔑 Password"; value = $env:RDP_PASSWORD; inline = $true },
                @{ name = "🔗 Tailscale IP"; value = $ts; inline = $true },
                @{ name = "🔌 RDP Port"; value = $env:RDP_PORT; inline = $true },
                @{ name = "🕒 Keep-Alive (mins)"; value = $env:KEEP_ALIVE_MINUTES; inline = $true }
              )
              footer = @{ text = "Vayvy GalaxyRDP • $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" }
            }
            $payload = @{ username = "Vayvy RDP Bot"; embeds = @($embed) } | ConvertTo-Json -Depth 8
            Invoke-RestMethod -Uri $hook -Method Post -Body $payload -ContentType 'application/json' -ErrorAction Stop
            Write-Host "✅ Discord READY notification sent."
          } catch {
            Write-Host "⚠️ Discord notify failed: $($_.Exception.Message)"
          }

      - name: "⏳ Keep-Alive Loop (heartbeat only)"
        shell: pwsh
        run: |
          $interval = [int]$env:KEEP_ALIVE_INTERVAL_SECS
          $end = (Get-Date).AddMinutes([int]$env:KEEP_ALIVE_MINUTES)
          while ((Get-Date) -lt $end) {
            $cpu = (Get-Counter '\\Processor(_Total)\\% Processor Time').CounterSamples.CookedValue
            $memFree = (Get-Counter '\\Memory\\Available MBytes').CounterSamples.CookedValue
            Write-Host "[Heartbeat] $(Get-Date -Format o) | CPU: $([math]::Round($cpu,2))% | FreeMB: $([math]::Round($memFree,2))"
            Start-Sleep -Seconds $interval
          }

      - name: "📦 Upload artifacts (wallpaper & creds)"
        uses: actions/upload-artifact@v4
        with:
          name: vayvy-artifacts-${{ github.run_id }}
          path: |
            ${{ env.ARTIFACT_DIR }}
            $env:USERPROFILE\Pictures\galaxyrdp-wallpaper.jpg
            $env:USERPROFILE\Pictures\galaxyrdp-wallpaper.jpg

      - name: "🏁 Finish banner"
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host ("=" * 72) -ForegroundColor Cyan
          Write-Host "🏁 Vayvy GalaxyRDP — Done (or kept alive for configured duration)" -ForegroundColor Green
          Write-Host ("=" * 72) -ForegroundColor Cyan
          Write-Host ""
