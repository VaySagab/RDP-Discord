name: 🌌 GalaxyRDP Ultra by VayVy [12h Keep-Alive | Discord Integrated]

# ===================================================================
# GalaxyRDP Ultra - Longform Workflow (Upgraded)
# - Added: Resource Auto Alert (CPU/RAM) during 12h keep-alive
# - Added: Dynamic wallpaper watermark in TOP-RIGHT (repo / run / actor)
# - Added: Single Keep-Alive step that runs for KEEP_ALIVE_MINUTES (default 720)
# - Preserves original theme, banners, emojis, and step ordering (sequential)
# ===================================================================

on:
  workflow_dispatch:

jobs:
  rdp-server:
    runs-on: windows-latest
    timeout-minutes: 720   # 12 jam

    env:
      # ----------------------------------------------------------------
      # DO NOT CHANGE: Discord webhook as requested by user.
      # If you want to move this to secrets, consider using:
      #   DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      # ----------------------------------------------------------------
      DISCORD_WEBHOOK: "https://discord.com/api/webhooks/1420855927409737981/Lwex2weTGgSY6ZuM6NEZDsD3NMMpYakcMB1UC_PWEAITClQLmNmildPaPWOipM1MYAmu"

      # ----------------------------------------------------------------
      # Keep alive configuration
      # ----------------------------------------------------------------
      KEEP_ALIVE_MINUTES: 720

      # ----------------------------------------------------------------
      # Misc defaults (documented)
      # ----------------------------------------------------------------
      EMULATOR_BOOT_WAIT_SECONDS: 90
      EMULATOR_POLL_RETRIES: 6
      DOWNLOAD_TRIES: 4
      MIN_VALID_BYTES: 2000000   # 2MB basic sanity

    steps:

      # =================================================================
      # Intro / Banner (visual)
      # =================================================================
      - name: ✨ Intro: Job metadata & friendly banner
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "════════════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
          Write-Host "🌌 GalaxyRDP Ultra - PRO Mode (Verbose Logging, Monitoring, Discord)" -ForegroundColor Green
          Write-Host "Repository : $env:GITHUB_REPOSITORY" -ForegroundColor Cyan
          Write-Host "Run ID     : $env:GITHUB_RUN_ID" -ForegroundColor Cyan
          Write-Host "Actor      : $env:GITHUB_ACTOR" -ForegroundColor Cyan
          Write-Host "Start Time : $(Get-Date -Format o)" -ForegroundColor Cyan
          Write-Host "════════════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Step 1 - Enable RDP (safe)
      # =================================================================
      - name: ⚙️ Enable RDP (STEP 1)
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "⚙️ [STEP 1] Enabling Remote Desktop Protocol (RDP)" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          try {
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -ErrorAction Stop
            Enable-NetFirewallRule -DisplayGroup "Remote Desktop" -ErrorAction SilentlyContinue
            Restart-Service -Name TermService -Force -ErrorAction SilentlyContinue
            Write-Host "✅ RDP enabled successfully!" -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Warning: enabling RDP returned an error (non-fatal): $_" -ForegroundColor Yellow
          }
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Step 2 - Create RDP User (Vayvy)
      # =================================================================
      - name: 👤 Create RDP user (Vayvy) (STEP 2)
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "👤 [STEP 2] Creating RDP User 'Vayvy' (random password + fallback)" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          Add-Type -AssemblyName System.Security
          $charSet = @{
            Upper = [char[]](65..90); Lower = [char[]](97..122); Number = [char[]](48..57)
          }
          function New-RandomPassword($minLen = 8) {
            $pwd = ""
            $pwd += ($charSet.Upper | Get-Random -Count 1)
            $pwd += ($charSet.Lower | Get-Random -Count 1)
            $pwd += ($charSet.Number | Get-Random -Count 1)
            $all = $charSet.Upper + $charSet.Lower + $charSet.Number
            while ($pwd.Length -lt $minLen) { $pwd += ($all | Get-Random -Count 1) }
            return ($pwd.ToCharArray() | Get-Random -Count $pwd.Length) -join ''
          }

          $finalPassword = New-RandomPassword -minLen 12
          $attempt=1
          $created=$false
          while (-not $created -and $attempt -le 3) {
            try {
              $secure = ConvertTo-SecureString $finalPassword -AsPlainText -Force
              if (-not (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue)) {
                New-LocalUser -Name "Vayvy" -Password $secure -AccountNeverExpires -ErrorAction Stop
                Write-Host "✅ Created user 'Vayvy' (attempt $attempt)."
              } else {
                Set-LocalUser -Name "Vayvy" -Password $secure -ErrorAction Stop
                Write-Host "✅ Updated password for 'Vayvy' (attempt $attempt)."
              }
              $created=$true
            } catch {
              Write-Host "⚠️ Attempt $attempt failed to create/update 'Vayvy': $_" -ForegroundColor Yellow
              if ($attempt -eq 1) { $finalPassword = New-RandomPassword -minLen 14; Write-Host "➡️ Expanded pwd length." -ForegroundColor Yellow }
              elseif ($attempt -eq 2) { $finalPassword = 'VayVy2025!'; Write-Host "➡️ Using fallback strong password." -ForegroundColor Yellow }
              else { Write-Host "❌ Could not create local user 'Vayvy' after retries." -ForegroundColor Red; exit 1 }
            }
            $attempt++
          }

          try { Add-LocalGroupMember -Group "Administrators" -Member "Vayvy" -ErrorAction SilentlyContinue } catch {}
          try { Add-LocalGroupMember -Group "Remote Desktop Users" -Member "Vayvy" -ErrorAction SilentlyContinue } catch {}

          Add-Content -Path $env:GITHUB_ENV -Value "RDP_USER=Vayvy"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASS=$finalPassword"

          Write-Host "🎉 RDP user ready: Vayvy (password stored in env RDP_PASS) - keep it secret!" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # STEP: Generate Custom Text Wallpaper (with top-right watermark)
      # This step creates a 1920x1080 JPEG with centered main text and
      # a small dynamic watermark in the TOP-RIGHT corner.
      # =================================================================
      - name: 🖼️ Generate Custom Text Wallpaper
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🖼️ [WALLPAPER] Generating & applying custom wallpaper with centered text + top-right watermark" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          Add-Type -AssemblyName System.Drawing

          # Canvas size - adjust if you target a different resolution
          $width = 1920
          $height = 1080

          # Create bitmap and graphics object
          $bmp = New-Object System.Drawing.Bitmap $width, $height
          $g = [System.Drawing.Graphics]::FromImage($bmp)

          # High quality rendering settings
          $g.TextRenderingHint = [System.Drawing.Text.TextRenderingHint]::AntiAliasGridFit
          $g.SmoothingMode = [System.Drawing.Drawing2D.SmoothingMode]::HighQuality
          $g.Clear([System.Drawing.Color]::Black)

          # Main centered text (keep original style)
          $text = "🌌 GalaxyRDP Ultra by VayVy 🚀"

          # Choose font - Consolas is available on Windows images; fallback included
          try {
            $font = New-Object System.Drawing.Font "Consolas",72,[System.Drawing.FontStyle]::Bold
          } catch {
            $font = New-Object System.Drawing.Font "Arial",72,[System.Drawing.FontStyle]::Bold
          }

          # Brush and shadow
          $brush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::FromArgb(255,50,205,50)) # Lime-ish
          $shadowBrush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::FromArgb(180,0,0,0))

          # Measure text
          $size = $g.MeasureString($text, $font)
          $x = [math]::Max(10, ($width - $size.Width) / 2)
          $y = [math]::Max(10, ($height - $size.Height) / 2)

          # Draw shadow (offset)
          $g.DrawString($text, $font, $shadowBrush, $x+4, $y+4)

          # Draw main text
          $g.DrawString($text, $font, $brush, $x, $y)

          # Dynamic watermark in TOP-RIGHT corner
          $wmText = "Repository: $($env:GITHUB_REPOSITORY)  |  Run: $($env:GITHUB_RUN_ID)  |  Actor: $($env:GITHUB_ACTOR)"
          try {
            $wmFont = New-Object System.Drawing.Font "Arial",18,[System.Drawing.FontStyle]::Regular
          } catch {
            $wmFont = New-Object System.Drawing.Font "Segoe UI",18,[System.Drawing.FontStyle]::Regular
          }
          $wmSize = $g.MeasureString($wmText, $wmFont)
          $wmX = [math]::Max(10, $width - $wmSize.Width - 20)
          $wmY = 20

          # Slightly translucent watermark
          $wmBrush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::FromArgb(200,200,200,200))
          $g.DrawString($wmText, $wmFont, $wmBrush, $wmX, $wmY)

          # Optional: add small footer unchanged
          $footerFont = New-Object System.Drawing.Font "Arial",18,[System.Drawing.FontStyle]::Regular
          $footerText = "GalaxyRDP Ultra • Generated on $(Get-Date -Format o)"
          $fsize = $g.MeasureString($footerText, $footerFont)
          $g.DrawString($footerText, $footerFont, [System.Drawing.Brushes]::Gray, ($width - $fsize.Width) - 20, $height - $fsize.Height - 20)

          # Save file to user's Pictures folder
          $outPath = Join-Path $env:USERPROFILE "Pictures\galaxyrdp-wallpaper.jpg"
          $dir = Split-Path $outPath -Parent
          if (-not (Test-Path $dir)) { New-Item -Path $dir -ItemType Directory | Out-Null }

          $bmp.Save($outPath, [System.Drawing.Imaging.ImageFormat]::Jpeg)

          # Apply wallpaper for current user (HKCU)
          try {
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name Wallpaper -Value $outPath -ErrorAction SilentlyContinue
            rundll32.exe user32.dll, UpdatePerUserSystemParameters
            Write-Host "✅ Custom wallpaper saved to $outPath and applied." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Failed to set wallpaper in registry: $_" -ForegroundColor Yellow
            Write-Host "ℹ️ Wallpaper file still saved at $outPath" -ForegroundColor Cyan
          }

          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Step 3 - Tailscale install (kept minimal)
      # =================================================================
      - name: 🌐 Install Tailscale (STEP 3)
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🌐 [STEP 3] Installing Tailscale VPN (with retries, best-effort)" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $installer = "$env:TEMP\tailscale.msi"
          $tries=0
          $installed = $false
          while ($tries -lt 3 -and -not $installed) {
            try {
              Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi" -OutFile $installer -UseBasicParsing -ErrorAction Stop
              Start-Process msiexec.exe -ArgumentList "/i", "`"$installer`"", "/quiet", "/norestart" -Wait -ErrorAction Stop
              Remove-Item $installer -Force -ErrorAction SilentlyContinue
              Write-Host "✅ Tailscale installed." -ForegroundColor Yellow
              $installed = $true
            } catch {
              $tries++
              Write-Host "⚠️ Tailscale install attempt $tries failed: $_" -ForegroundColor Yellow
              Start-Sleep -Seconds (10 * $tries)
              if ($tries -ge 3) { Write-Host "❌ Tailscale installation failed after retries; continuing without Tailscale." -ForegroundColor Red }
            }
          }

          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Step 4 - Connect to Tailscale (optional; uses secret if present)
      # =================================================================
      - name: 🔗 Connect to Tailscale (STEP 4)
        shell: pwsh
        env:
          VAYVY_TAILSCALE_AUTHKEY: ${{ secrets.VAYVY_TAILSCALE_AUTHKEY }}
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🔗 [STEP 4] Connecting to Tailscale Network (best-effort)" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $tsExe = (Get-Command tailscale.exe -ErrorAction SilentlyContinue)?.Source
          if (-not $tsExe) {
            $candidates = @("$env:ProgramFiles\Tailscale\tailscale.exe","$env:ProgramFiles(x86)\Tailscale\tailscale.exe")
            foreach ($p in $candidates) { if (Test-Path $p) { $tsExe = $p; break } }
          }

          if ($tsExe -and $env:VAYVY_TAILSCALE_AUTHKEY) {
            try {
              & $tsExe up --authkey=$env:VAYVY_TAILSCALE_AUTHKEY --hostname "gh-runner-${env:GITHUB_RUN_ID}" --accept-routes
              $tsIP = $null; $retries = 0
              while (-not $tsIP -and $retries -lt 12) {
                Start-Sleep -Seconds 5
                $out = & $tsExe ip -4 2>$null
                if ($out) { $tsIP = ($out | Where-Object { $_ -match '^\d+\.\d+\.\d+\.\d+$' } | Select-Object -First 1) }
                $retries++
              }
              if ($tsIP) {
                Add-Content -Path $env:GITHUB_ENV -Value "VAYVY_TAILSCALE_IP=$tsIP"
                Write-Host "🌍 Tailscale IP: $tsIP" -ForegroundColor Yellow
              } else {
                Add-Content -Path $env:GITHUB_ENV -Value "VAYVY_TAILSCALE_IP=Unknown"
                Write-Host "⚠️ Tailscale connected but IP not found." -ForegroundColor Yellow
              }
            } catch {
              Add-Content -Path $env:GITHUB_ENV -Value "VAYVY_TAILSCALE_IP=Unknown"
              Write-Host "⚠️ Tailscale up failed: $_" -ForegroundColor Yellow
            }
          } else {
            Add-Content -Path $env:GITHUB_ENV -Value "VAYVY_TAILSCALE_IP=Unknown"
            Write-Host "⚠️ tailscale.exe not found or authkey missing; skipping connect." -ForegroundColor Yellow
          }

          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Step 5 - System tweaks (safe & non-destructive)
      # =================================================================
      # =================================================================
      # Step 5: Optimize Windows for RDP
      # =================================================================
      - name: ⚡ Optimize Windows for RDP (STEP 5)
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "⚡ [STEP 5] Optimizing Windows (Safe Tweaks)" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          try {
            # Visual effect: best performance
            reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f | Out-Null

            # Disable heavy services
            $services = "WSearch","SysMain","Spooler","Fax","DiagTrack","wuauserv","BthHFSrv"
            foreach ($svc in $services) {
              Stop-Service -Name $svc -Force -ErrorAction SilentlyContinue
              Set-Service -Name $svc -StartupType Disabled -ErrorAction SilentlyContinue
              Write-Host "⛔ Disabled service: $svc" -ForegroundColor DarkGray
            }

            # Remove unnecessary pre-installed apps
            Get-AppxPackage *xbox* | Remove-AppxPackage -ErrorAction SilentlyContinue
            Get-AppxPackage *OneDrive* | Remove-AppxPackage -ErrorAction SilentlyContinue
            Write-Host "🧹 Removed Xbox & OneDrive apps." -ForegroundColor DarkGray

            # Quick cleanup temp files
            Remove-Item -Path $env:TEMP\* -Recurse -Force -ErrorAction SilentlyContinue
            cleanmgr /verylowdisk | Out-Null

            Write-Host "✅ System optimization applied (safe tweaks complete)." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Some optimization steps failed: $_" -ForegroundColor Yellow
          }
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Step 6 - Network & Resource snapshot
      # =================================================================
      - name: 📡 Check Latency & Health (STEP 6)
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "📡 [STEP 6] Network latency & basic health snapshot" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          try {
            $target = if ($env:VAYVY_TAILSCALE_IP -and $env:VAYVY_TAILSCALE_IP -ne 'Unknown') { $env:VAYVY_TAILSCALE_IP } else { '8.8.8.8' }
            Write-Host "↔️ Pinging $target ..."
            Test-Connection -ComputerName $target -Count 4 -ErrorAction SilentlyContinue | Format-Table
          } catch {
            Write-Host "⚠️ Ping test failed: $_" -ForegroundColor Yellow
          }

          try {
            $cpu = Get-CimInstance -ClassName Win32_Processor | Select-Object -ExpandProperty LoadPercentage -ErrorAction SilentlyContinue
            $mem = Get-CimInstance -ClassName Win32_OperatingSystem | ForEach-Object { [math]::Round((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory)/$_.TotalVisibleMemorySize)*100,2) }
            Write-Host "📊 CPU Load: $cpu% | Memory Usage: $mem%" -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Resource snapshot failed: $_" -ForegroundColor Yellow
          }

          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Start Notification to Discord (Detailed)
      # =================================================================
      - name: 🔔 Discord Notification (Start)
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🔔 [NOTIFY] Sending Discord start notification" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $rdpUser = $env:RDP_USER
          $rdpPass = $env:RDP_PASS
          $actor = $env:GITHUB_ACTOR
          $runId = $env:GITHUB_RUN_ID
          $repo = $env:GITHUB_REPOSITORY

          $msg = @"
          📡 **GalaxyRDP Ultra — Session Started**
          Repository : $repo
          Run ID     : $runId
          Actor      : $actor
          RDP User   : $rdpUser
          RDP Pass   : $rdpPass
          Note       : MuMu / Roblox / AutoClicker installs are skipped. Install them manually.
          "@

          $payload = @{ content = $msg } | ConvertTo-Json -Compress
          try {
            Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType "application/json" -Body $payload -ErrorAction Stop
            Write-Host "✅ Start notification sent to Discord." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Failed to send start notification: $_" -ForegroundColor Yellow
          }

          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Keep-Alive + Resource Auto Alert (12h)
      # - Runs for KEEP_ALIVE_MINUTES (default 720)
      # - Polls every 15 minutes and posts to Discord if CPU or RAM thresholds hit
      # - Keeps the runner active for the requested period
      # =================================================================
      - name: ⏳ Keep Alive 12h + Resource Auto Alert
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "⏳ [KEEP-ALIVE] Starting keep-alive loop with resource alerts" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          function Send-Discord($message) {
            if (-not $env:DISCORD_WEBHOOK) { Write-Host "⚠️ No DISCORD_WEBHOOK configured."; return }
            $payload = @{ content = $message } | ConvertTo-Json -Compress
            try { Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType "application/json" -Body $payload -ErrorAction Stop } catch { Write-Host "⚠️ Send-Discord failed: $_" -ForegroundColor Yellow }
          }

          # Configuration
          $keepMinutes = 720
          if ($env:KEEP_ALIVE_MINUTES) { $parsed = 0; if ([int]::TryParse($env:KEEP_ALIVE_MINUTES,[ref]$parsed)) { $keepMinutes = $parsed } }
          $endTime = (Get-Date).AddMinutes($keepMinutes)
          $pollSeconds = 900   # 15 minutes
          $cpuThreshold = 90
          $memThreshold = 85

          Send-Discord "⏳ **Keep-Alive Started** — Running for $keepMinutes minute(s). Run: $($env:GITHUB_RUN_ID) | Repo: $($env:GITHUB_REPOSITORY) | Actor: $($env:GITHUB_ACTOR)"

          while ((Get-Date) -lt $endTime) {
            try {
              # CPU (average across processors)
              $cpu = Get-CimInstance -ClassName Win32_Processor | Select-Object -ExpandProperty LoadPercentage -ErrorAction SilentlyContinue
              if ($cpu -is [array]) { $cpuVal = [math]::Round(($cpu | Measure-Object -Average).Average,2) } else { $cpuVal = $cpu }

              # Memory percentage used
              $memVal = Get-CimInstance -ClassName Win32_OperatingSystem | ForEach-Object { [math]::Round((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory)/$_.TotalVisibleMemorySize)*100,2) }

              # Disk free on C
              $cFree = (Get-PSDrive -Name C -ErrorAction SilentlyContinue).Free

              Write-Host "[Keep-Alive] Now: $(Get-Date -Format o) | CPU: $cpuVal% | RAM: $memVal% | C Free: $cFree" -ForegroundColor Cyan

              # Send alert if above thresholds
              if ($cpuVal -gt $cpuThreshold -or $memVal -gt $memThreshold) {
                $msg = "⚠️ **Resource Alert** — CPU=$cpuVal% RAM=$memVal% (Thresholds: CPU>$cpuThreshold%, RAM>$memThreshold%) | Run: $($env:GITHUB_RUN_ID) | Repo: $($env:GITHUB_REPOSITORY)"
                Send-Discord $msg
              }

            } catch {
              Write-Host "⚠️ Keep-Alive monitoring failed for iteration: $_" -ForegroundColor Yellow
            }

            # Sleep until next poll or until end time
            $remaining = ($endTime - (Get-Date)).TotalSeconds
            if ($remaining -le 0) { break }
            $sleep = [math]::Min($pollSeconds, [math]::Max(1, [math]::Floor($remaining)))
            Start-Sleep -Seconds $sleep
          }

          Send-Discord "✅ **Keep-Alive Finished** — Run $($env:GITHUB_RUN_ID) has completed $keepMinutes minutes of keep-alive."

          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Monitoring Report generation (report-only)
      # =================================================================
      - name: 🛡️ Monitoring (report-only) - produce file (STEP 12)
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🛡️ [STEP 12] Monitoring (report-only) - snapshotting status" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $report = [ordered]@{}
          $timestamp = (Get-Date).ToString("o")
          $report["Timestamp"] = $timestamp
          $report["Runner"] = $env:RUNNER_NAME
          $report["GitHubActor"] = $env:GITHUB_ACTOR

          try {
            $ts = Get-Service -Name TermService -ErrorAction Stop
            $report["RDP_Service"] = $ts.Status
          } catch {
            $report["RDP_Service"] = "NotFound"
          }

          try {
            $emuProc = Get-Process -Name MuMuPlayer -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($null -ne $emuProc) {
              $report["Emulator_Process"] = "Running"
              $report["Emulator_PID"] = $emuProc.Id
            } else {
              $report["Emulator_Process"] = "NotRunning"
            }
          } catch {
            $report["Emulator_Process"] = "NotRunning"
          }

          try {
            $adb = $env:ADB_PATH
            if ($adb -and (Test-Path $adb)) {
              $devices = & $adb devices 2>$null
              $report["ADB_Devices"] = ($devices -join "`n")
            } else {
              $report["ADB_Devices"] = "ADB not installed"
            }
          } catch {
            $report["ADB_Devices"] = "Error"
          }

          try {
            $cpu = Get-CimInstance -ClassName Win32_Processor | Select-Object -ExpandProperty LoadPercentage -ErrorAction SilentlyContinue
            $memPercent = Get-CimInstance -ClassName Win32_OperatingSystem | ForEach-Object { [math]::Round((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory)/$_.TotalVisibleMemorySize)*100,2) }
            $diskFree = (Get-PSDrive -Name C -ErrorAction SilentlyContinue).Free
            $report["CPU"] = "$cpu%"
            $report["Memory"] = "$memPercent%"
            $report["C_Drive_Free_Bytes"] = $diskFree
          } catch {
            $report["SystemStats"] = "Unavailable"
          }

          $reportFile = "$env:TEMP\galaxyrdp_monitor_$($env:GITHUB_RUN_ID).txt"
          $sb = New-Object System.Text.StringBuilder
          $report.GetEnumerator() | ForEach-Object { [void]$sb.AppendLine("$($_.Key): $($_.Value)") }
          $sb.ToString() | Out-File -FilePath $reportFile -Encoding utf8

          Write-Host "📋 Monitoring report saved: $reportFile" -ForegroundColor Yellow
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Success Notification (on success)
      # =================================================================
      - name: ✅ Notify Discord on Success
        if: success()
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "✅ [NOTIFY] Sending Discord success notification" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $runId = $env:GITHUB_RUN_ID
          $actor = $env:GITHUB_ACTOR
          $repo = $env:GITHUB_REPOSITORY
          $msg = @"
          ✅ **GalaxyRDP Ultra — Workflow Succeeded**
          Repository : $repo
          Run ID     : $runId
          Actor      : $actor
          Note       : MuMu / Roblox / AutoClicker are not installed. Install manually.
          "@
          $payload = @{ content = $msg } | ConvertTo-Json -Compress
          try {
            Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType "application/json" -Body $payload -ErrorAction Stop
            Write-Host "✅ Success notification sent to Discord." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Failed to send success notification: $_" -ForegroundColor Yellow
          }

          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Failure Notification (on failure)
      # =================================================================
      - name: ❌ Notify Discord on Failure
        if: failure()
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "❌ [NOTIFY] Workflow failed - sending Discord alert" -ForegroundColor Red
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $runId = $env:GITHUB_RUN_ID
          $actor = $env:GITHUB_ACTOR
          $job = "${{ github.job }}"
          $repo = $env:GITHUB_REPOSITORY
          $url = "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Read monitoring report if present
          $reportFile = "$env:TEMP\galaxyrdp_monitor_$($env:GITHUB_RUN_ID).txt"
          $reportText = "No report file."
          if (Test-Path $reportFile) { $reportText = Get-Content -Path $reportFile -Raw }

          $embed = @{
            content = "🚨 **GalaxyRDP Ultra — Workflow FAILED**"
            embeds = @(
              @{
                title = "Failure Details"
                description = "Job: $job | Run: $runId | Actor: $actor | Repo: $repo"
                fields = @(
                  @{ name = "Run URL"; value = $url; inline = $false }
                  @{ name = "Monitoring Snapshot"; value = ($reportText.Substring(0,[math]::Min($reportText.Length,1500))); inline = $false }
                )
              }
            )
          } | ConvertTo-Json -Depth 6

          try {
            Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType "application/json" -Body $embed -ErrorAction Stop
            Write-Host "✅ Failure notification sent to Discord." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Failed to send failure notification: $_" -ForegroundColor Yellow
          }

          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Cleanup (end-of-job best-effort cleanup)
      # =================================================================
      - name: 🧹 Cleanup (best-effort)
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🧹 [CLEANUP] Performing best-effort cleanup" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          try {
            if (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue) {
              Remove-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue
              Write-Host "🧾 Removed local user 'Vayvy'." -ForegroundColor Yellow
            } else {
              Write-Host "ℹ️ Local user 'Vayvy' not present." -ForegroundColor Cyan
            }
          } catch {
            Write-Host "⚠️ Failed to remove user: $_" -ForegroundColor Yellow
          }

          try {
            $tsExe = (Get-Command tailscale.exe -ErrorAction SilentlyContinue)?.Source
            if ($tsExe) { & $tsExe logout -ErrorAction SilentlyContinue; Write-Host "🔒 Tailscale logged out." -ForegroundColor Yellow }
          } catch {
            Write-Host "⚠️ Tailscale logout failed: $_" -ForegroundColor Yellow
          }

          try {
            Stop-Service -Name TermService -Force -ErrorAction SilentlyContinue
            Write-Host "🛑 TermService stopped (best-effort)." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Stop TermService failed or not permitted: $_" -ForegroundColor Yellow
          }

          Write-Host "✅ Cleanup finished." -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Final banner / footer
      # =================================================================
      - name: 🏁 Finish / Summary Banner
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "════════════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
          Write-Host "🏁 GalaxyRDP Ultra - Run Complete (or kept alive for duration)" -ForegroundColor Green
          Write-Host "Run ID: $env:GITHUB_RUN_ID  •  Actor: $env:GITHUB_ACTOR" -ForegroundColor Cyan
          Write-Host "For details, check Actions run logs & Discord notification." -ForegroundColor Cyan
          Write-Host "════════════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
          Write-Host ""
