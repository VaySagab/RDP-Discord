name: "🌌 GalaxyRDP Ultra by VayVy — Cleaned"

on:
  workflow_dispatch:

jobs:
  vayvy-rdp:
    runs-on: windows-latest
    timeout-minutes: 720 # 12 jam

    env:
      # ---------------------------
      # EDIT THESE (strongly recommended to use GitHub Secrets)
      # ---------------------------
      # Discord webhook: move to secrets (recommended: secrets.DISCORD_WEBHOOK)
      DISCORD_WEBHOOK: "https://discord.com/api/webhooks/1421078099763789845/u1bE8nK9wIBfMR1pii65HsQqb28BfcF65VMaLzurUGtIoaKeYg1Eb67gLG9aLdWCJ0MM"

      # Tailscale auth key: recommended to use secrets.TAILSCALE_AUTH_KEY
      USE_INLINE_TAILSCALE_KEY: "false"
      INLINE_TAILSCALE_AUTH_KEY: ""

      # Owner / user & password (for convenience here; better to use secrets)
      RDP_USER: "Vayvy"
      RDP_PASSWORD: "Vay2025!"

      # Cosmetic / keepalive / artifacts
      KEEP_ALIVE_MINUTES: "720"        # 12 hours
      KEEP_ALIVE_INTERVAL_SECS: "300"  # heartbeat every 5 minutes
      ARTIFACT_DIR: "galaxyrdp-artifacts"
      WALLPAPER_WIDTH: "1920"
      WALLPAPER_HEIGHT: "1080"
      WALLPAPER_PATH: "$env:PUBLIC\\Vayvy_galaxyrdp_wallpaper.jpg"
      TAILSCALE_VERSION: "1.82.0"
      RDP_PORT: "3389"

    steps:
      - name: "📥 Checkout (optional assets)"
        uses: actions/checkout@v4

      - name: "🧰 Prepare artifact folder"
        shell: pwsh
        run: |
          $d = "$env:ARTIFACT_DIR"
          if (-not (Test-Path $d)) { New-Item -Path $d -ItemType Directory | Out-Null }
          Write-Host "Artifact dir: $d"

      - name: "✨ Intro Banner — GalaxyRDP Ultra"
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host ("═" * 80) -ForegroundColor Cyan
          Write-Host "🌌 GalaxyRDP Ultra by VayVy — Professional Provisioning & Keep-Alive" -ForegroundColor Green
          Write-Host "Repository : $env:GITHUB_REPOSITORY" -ForegroundColor Cyan
          Write-Host "Run ID     : $env:GITHUB_RUN_ID" -ForegroundColor Cyan
          Write-Host "Actor      : $env:GITHUB_ACTOR" -ForegroundColor Cyan
          Write-Host "Start Time : $(Get-Date -Format o)" -ForegroundColor Cyan
          Write-Host ("═" * 80) -ForegroundColor Cyan
          Write-Host ""

      - name: "🛡️ Ensure Admin Privileges (best-effort check)"
        shell: pwsh
        run: |
          try {
            $isAdmin = (New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
            if (-not $isAdmin) {
              Write-Host "⚠️ Warning: Runner may not be elevated. Some operations may fail." -ForegroundColor Yellow
            } else {
              Write-Host "✅ Running with administrative privileges." -ForegroundColor Green
            }
          } catch {
            Write-Host "⚠️ Failed to determine elevation: $_" -ForegroundColor Yellow
          }

      - name: "⚙️ Configure core RDP settings (enable, NLA opt, firewall)"
        shell: pwsh
        run: |
          $log="$env:ARTIFACT_DIR\01-config-rdp.log"
          try {
            Write-Host "----- RDP CONFIGURATION -----" -ForegroundColor Cyan

            # Enable RDP
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
            Write-Host "🔓 RDP enabled (fDenyTSConnections=0)" -ForegroundColor Green

            # Optionally set NLA off for broader compatibility
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
            Write-Host "🔧 RDP WinStation params set (UserAuthentication=0, SecurityLayer=0)" -ForegroundColor Green

            # Firewall: idempotent rule for RDP port
            $ruleName = "GalaxyRDP-Allowed-3389"
            & netsh advfirewall firewall delete rule name="$ruleName" 2>$null
            netsh advfirewall firewall add rule name="$ruleName" dir=in action=allow protocol=TCP localport=$env:RDP_PORT profile=any | Out-Null
            Write-Host "🛡️ Firewall rule added: $ruleName on port $env:RDP_PORT" -ForegroundColor Green

            # Restart TermService to apply
            Restart-Service -Name TermService -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 3
            Write-Host "🔁 TermService restarted" -ForegroundColor Green

            "OK" | Out-File -FilePath $log -Append
          } catch {
            $_ | Out-String | Out-File -FilePath $log -Append
            Write-Host "❌ RDP configuration failed: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "👤 Create local RDP user (Vayvy) — password fixed"
        shell: pwsh
        run: |
          $log="$env:ARTIFACT_DIR\02-create-user.log"
          try {
            Write-Host "----- CREATE RDP USER -----" -ForegroundColor Magenta
            $user = $env:RDP_USER
            $pass = $env:RDP_PASSWORD

            # If user exists, remove then create for idempotency
            if (Get-LocalUser -Name $user -ErrorAction SilentlyContinue) {
              Write-Host "♻️ Removing existing user $user" -ForegroundColor Yellow
              Remove-LocalUser -Name $user -ErrorAction SilentlyContinue
            }

            $secure = ConvertTo-SecureString $pass -AsPlainText -Force
            New-LocalUser -Name $user -Password $secure -AccountNeverExpires -PasswordNeverExpires -UserMayNotChangePassword:$false -ErrorAction Stop

            # Add to groups
            Add-LocalGroupMember -Group "Administrators" -Member $user -ErrorAction SilentlyContinue
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user -ErrorAction SilentlyContinue

            # Save credentials to artifact (user must delete after download)
            $credFile = "$env:ARTIFACT_DIR\creds.txt"
            "USER:$user`nPASSWORD:$pass`nNOTE: Remove this file after secure retrieval." | Out-File -FilePath $credFile -Encoding UTF8

            Write-Host "🔐 User $user created and added to groups; credentials stored in artifact ($credFile)." -ForegroundColor Green
            "OK" | Out-File -FilePath $log -Append
          } catch {
            $_ | Out-String | Out-File -FilePath $log -Append
            Write-Host "❌ User creation failed: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "🖼️ Generate Custom Text Wallpaper" 
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🖼️ Generating Custom Wallpaper (Vayvy watermark & footer)" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          try {
            Add-Type -AssemblyName System.Drawing
            $width = 1920; $height = 1080
            $bmp = New-Object System.Drawing.Bitmap $width, $height
            $g = [System.Drawing.Graphics]::FromImage($bmp)
            $g.SmoothingMode = [System.Drawing.Drawing2D.SmoothingMode]::HighQuality
            $g.Clear([System.Drawing.Color]::Black)

            # Main text in center
            $mainText = "🌌 GalaxyRDP Ultra by VayVy 🚀"
            $fontMain = New-Object System.Drawing.Font("Consolas", 72, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Pixel)
            $brushMain = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::Lime)
            $size = $g.MeasureString($mainText, $fontMain)
            $x = ($width - $size.Width) / 2
            $y = ($height - $size.Height) / 2
            $g.DrawString($mainText, $fontMain, $brushMain, $x, $y)

            # Watermark (top-right)
            $wmText = "$($env:GITHUB_REPOSITORY) | Run $($env:GITHUB_RUN_ID) | $($env:GITHUB_ACTOR)"
            $wmFont = New-Object System.Drawing.Font("Arial", 18, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Pixel)
            $wmSize = $g.MeasureString($wmText, $wmFont)
            $wmX = $width - $wmSize.Width - 20
            $wmY = 20
            $g.DrawString($wmText, $wmFont, [System.Drawing.Brushes]::Gray, $wmX, $wmY)

            # Footer (bottom-right)
            $footer = "⚡ Powered by GitHub Actions"
            $footerFont = New-Object System.Drawing.Font("Arial", 18, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Pixel)
            $footerSize = $g.MeasureString($footer, $footerFont)
            $fx = $width - $footerSize.Width - 20
            $fy = $height - $footerSize.Height - 20
            $g.DrawString($footer, $footerFont, [System.Drawing.Brushes]::DarkGray, $fx, $fy)

            # Save and apply
            $outPath = "$env:USERPROFILE\Pictures\galaxyrdp-wallpaper.jpg"
            $bmp.Save($outPath, [System.Drawing.Imaging.ImageFormat]::Jpeg)
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name Wallpaper -Value $outPath
            rundll32.exe user32.dll, UpdatePerUserSystemParameters

            Write-Host "✅ Wallpaper applied successfully (with dynamic watermark & footer)." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Wallpaper generation failed: $_" -ForegroundColor Red
          }
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      - name: "🌐 Install Tailscale (versioned, idempotent)"
        shell: pwsh
        run: |
          $log="$env:ARTIFACT_DIR\04-install-tailscale.log"
          try {
            Write-Host "----- INSTALL TAILSCALE -----" -ForegroundColor Cyan
            $tsExe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
            if (Test-Path $tsExe) {
              Write-Host "✅ Tailscale already installed at $tsExe" -ForegroundColor Green
            } else {
              $ver = $env:TAILSCALE_VERSION
              $msi = Join-Path $env:TEMP "tailscale-$ver.msi"
              $url = "https://pkgs.tailscale.com/stable/tailscale-setup-$ver-amd64.msi"
              Write-Host "⬇️ Downloading $url ..." -ForegroundColor Cyan
              Invoke-WebRequest -Uri $url -OutFile $msi -UseBasicParsing -ErrorAction Stop
              Start-Process msiexec.exe -ArgumentList "/i", "`"$msi`"", "/quiet", "/norestart" -Wait -ErrorAction Stop
              Remove-Item $msi -Force -ErrorAction SilentlyContinue
              Write-Host "✅ Tailscale installed." -ForegroundColor Green
            }
            "OK" | Out-File -FilePath $log -Append
          } catch {
            $_ | Out-String | Out-File -FilePath $log -Append
            Write-Host "❌ Tailscale install failed: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: "🔗 Establish Tailscale connection (authkey handling & IP detection)"
        shell: pwsh
        env:
          # Prefer using secret: secrets.TAILSCALE_AUTH_KEY
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $log = "$env:ARTIFACT_DIR\05-tailscale-up.log"
          try {
            Write-Host "----- TAILSCALE UP -----" -ForegroundColor Cyan
            $tsExe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
            if (-not (Test-Path $tsExe)) { $tsExe = Join-Path ($env:ProgramFiles + " (x86)") "Tailscale\tailscale.exe" }
            if (-not (Test-Path $tsExe)) { throw "tailscale.exe not found" }

            $hostname = "gh-runner-$($env:GITHUB_RUN_ID)"
            $auth = $env:TAILSCALE_AUTH_KEY
            if ($auth -and $auth -ne "") {
              Write-Host "Using secret-provided TAILSCALE_AUTH_KEY" -ForegroundColor Cyan
              & $tsExe up --authkey=$auth --hostname=$hostname | Out-File -FilePath $log -Append
            } elseif ($env:USE_INLINE_TAILSCALE_KEY -eq "true" -and $env:INLINE_TAILSCALE_AUTH_KEY) {
              Write-Host "Using inline tailscale key (INSECURE) as requested" -ForegroundColor Yellow
              & $tsExe up --authkey=$env:INLINE_TAILSCALE_AUTH_KEY --hostname=$hostname | Out-File -FilePath $log -Append
            } else {
              Write-Host "⚠️ No Tailscale auth key provided. Attempting up without key (will likely fail)." -ForegroundColor Yellow
              & $tsExe up --hostname=$hostname | Out-File -FilePath $log -Append
            }

            # Wait for IP assignment w/ retries
            $tsIP = $null; $r=0
            while (-not $tsIP -and $r -lt 18) {
              Start-Sleep -Seconds 5
              $raw = & $tsExe ip -4 2>$null
              if ($raw) { $tsIP = ($raw -split "`n" | Where-Object { $_ -match '\\d+\\.\\d+\\.\\d+\\.\\d+' }) -join ',' }
              $r++
            }

            if (-not $tsIP) {
              try { $tsIP = (Invoke-RestMethod -Uri "https://ifconfig.me/ip" -TimeoutSec 8) } catch { $tsIP = "Unknown" }
            }

            Write-Host "🌍 Tailscale/Public IP: $tsIP" -ForegroundColor Green
            Add-Content -Path $env:GITHUB_ENV -Value "TS_IP=$tsIP"
            "TS_IP=$tsIP" | Out-File -FilePath $log -Append

            # Ensure RDP allowed on any interface (redundant with earlier rule)
            try {
              New-NetFirewallRule -DisplayName "GalaxyRDP-Allow-3389" -Direction Inbound -Protocol TCP -LocalPort $env:RDP_PORT -Action Allow -Profile Any -ErrorAction SilentlyContinue
            } catch {}

          } catch {
            $_ | Out-String | Out-File -FilePath $log -Append
            Write-Host "❌ Tailscale up failed: $($_.Exception.Message)" -ForegroundColor Red
            exit 1
          }

      - name: 🔍 Verify RDP reachability (via Tailscale IP or Public IP)
        shell: pwsh
        run: |
          $log = "$env:ARTIFACT_DIR\06-verify-rdp.log"
          $rdpPort = if ($env:RDP_PORT) { $env:RDP_PORT } else { 3389 }

          Write-Host "----- VERIFY RDP (Port $rdpPort) -----" -ForegroundColor Cyan
          "Verifying RDP port $rdpPort" | Out-File -FilePath $log -Append

          # Kumpulkan target IP
          $targets = @()
          if ($env:TS_IP) { $targets += @{ Name = "Tailscale"; Ip = $env:TS_IP } }
          if ($env:PUBLIC_IP) { $targets += @{ Name = "Public"; Ip = $env:PUBLIC_IP } }

          if (-not $targets) {
            Write-Host "⚠️ No IPs found to test (TS_IP / PUBLIC_IP missing)" -ForegroundColor Yellow
            exit 1
          }

          $reachable = $false
          foreach ($t in $targets) {
            $ip = $t.Ip
            $name = $t.Name

            Write-Host "Testing TCP $ip`:$rdpPort ..." -NoNewline
            try {
              $res = Test-NetConnection -ComputerName $ip -Port $rdpPort -WarningAction SilentlyContinue
              if ($res.TcpTestSucceeded) {
                Write-Host " ✅ $name reachable" -ForegroundColor Green
                "$name ($ip`:$rdpPort) reachable ✅" | Out-File -FilePath $log -Append
                $reachable = $true
              } else {
                Write-Host " ❌ $name not reachable" -ForegroundColor Red
                "$name ($ip`:$rdpPort) not reachable ❌" | Out-File -FilePath $log -Append
              }
            } catch {
              Write-Host " ❌ $name error: $_" -ForegroundColor Red
              "$name ($ip`:$rdpPort) error: $_" | Out-File -FilePath $log -Append
            }
          }

          if (-not $reachable) {
            Write-Host "❌ No RDP target reachable!" -ForegroundColor Red
            exit 1
          } else {
            Write-Host "✅ At least one RDP target is reachable" -ForegroundColor Green
          }

      - name: "📡 Network & System Snapshot (monitoring)"
        shell: pwsh
        run: |
          $outFile = "$env:ARTIFACT_DIR\07-monitoring.json"
          try {
            Write-Host "----- MONITORING SNAPSHOT -----" -ForegroundColor Cyan
            $os = Get-CimInstance Win32_OperatingSystem | Select-Object Caption, Version, BuildNumber, LastBootUpTime
            $cpu = (Get-Counter '\\Processor(_Total)\\% Processor Time').CounterSamples.CookedValue
            $memTotalMB = [math]::Round((Get-CimInstance Win32_ComputerSystem).TotalPhysicalMemory / 1MB,2)
            $memFreeMB = [math]::Round((Get-Counter '\\Memory\\Available MBytes').CounterSamples.CookedValue,2)
            $disks = Get-PSDrive -PSProvider FileSystem | Select-Object Name, @{n='FreeGB';e={[math]::Round($_.Free/1GB,2)}}
            $tails = ""
            try { $tails = (& "$env:ProgramFiles\Tailscale\tailscale.exe" status 2>$null) } catch {}
            $obj = [pscustomobject]@{
              Timestamp = (Get-Date).ToUniversalTime().ToString("o")
              Computer = $env:COMPUTERNAME
              OS = $os
              CPUPercent = [math]::Round($cpu,2)
              Memory = @{ TotalMB=$memTotalMB; FreeMB=$memFreeMB }
              Disks = $disks
              Tailscale = $tails
            }
            $obj | ConvertTo-Json -Depth 8 | Out-File -FilePath $outFile -Encoding UTF8
            Write-Host "✅ Monitoring snapshot: $outFile" -ForegroundColor Green
          } catch {
            Write-Host "⚠️ Monitoring failed: $($_.Exception.Message)" -ForegroundColor Yellow
          }

      - name: "🔔 Discord — Notify START (includes IP & password)"
        shell: pwsh
        run: |
          $log = "$env:ARTIFACT_DIR\08-discord-start.log"
          try {
            $hook = $env:DISCORD_WEBHOOK
            if (-not $hook -or $hook -eq "PASTE_YOUR_DISCORD_WEBHOOK_HERE") {
              Write-Host "⚠️ Discord webhook not configured. Skipping." -ForegroundColor Yellow
              exit 0
            }

            $run = $env:GITHUB_RUN_ID
            $actor = $env:GITHUB_ACTOR
            $repo = $env:GITHUB_REPOSITORY
            $tsip = $env:TS_IP
            try { $public = Invoke-RestMethod -Uri "https://ifconfig.me/ip" -TimeoutSec 6 } catch { $public = "Unknown" }

            $embed = @{
              title = "🚀 GalaxyRDP Ultra — Provisioning Started"
              description = "Preparing RDP, user, Tailscale, wallpaper, and keep-alive."
              color = 5814783
              fields = @(
                @{ name = "👤 Actor"; value = $actor; inline = $true },
                @{ name = "📦 Repo";  value = $repo; inline = $true },
                @{ name = "🔁 Run ID"; value = $run; inline = $true },
                @{ name = "🌐 Public IP"; value = $public; inline = $true },
                @{ name = "🔗 Candidate IP (Tailscale)"; value = ($tsip ? $tsip : "Pending"); inline = $true },
                @{ name = "👤 User"; value = $env:RDP_USER; inline = $true },
                @{ name = "🔑 Password"; value = $env:RDP_PASSWORD; inline = $true }
              )
              footer = @{ text = "GalaxyRDP Ultra • $(Get-Date -Format o)" }
            }

            $payload = @{ username = "GalaxyRDP Bot"; embeds = @($embed) } | ConvertTo-Json -Depth 8
            Invoke-RestMethod -Uri $hook -Method Post -Body $payload -ContentType 'application/json' -ErrorAction Stop
            Write-Host "✅ Discord start notification posted (with password)." -ForegroundColor Green
            "OK" | Out-File -FilePath $log -Append
          } catch {
            $_ | Out-String | Out-File -FilePath $log -Append
            Write-Host "⚠️ Discord start notify failed: $($_.Exception.Message)" -ForegroundColor Yellow
          }

      - name: "⏳ Keep-Alive Loop (12h) — background job + alert thresholds"
        shell: pwsh
        run: |
          $log = "$env:ARTIFACT_DIR\09-keepalive.log"
          try {
            Write-Host "----- START KEEP-ALIVE (background) -----" -ForegroundColor Cyan

            $interval = [int]$env:KEEP_ALIVE_INTERVAL_SECS
            $limitMinutes = [int]$env:KEEP_ALIVE_MINUTES

            $script = {
              param($envvars)
              $hook = $envvars.DISCORD_WEBHOOK
              $user = $envvars.RDP_USER
              $pass = $envvars.RDP_PASSWORD
              $interval = [int]$envvars.KEEP_ALIVE_INTERVAL_SECS
              $keepMinutes = [int]$envvars.KEEP_ALIVE_MINUTES

              for ($elapsed = 0; $elapsed -lt ($keepMinutes * 60); $elapsed += $interval) {
                try {
                  $cpu = (Get-Counter '\\Processor(_Total)\\% Processor Time').CounterSamples.CookedValue
                  $memFree = (Get-Counter '\\Memory\\Available MBytes').CounterSamples.CookedValue
                  $line = "[Heartbeat] $(Get-Date -Format o) | CPU: $([math]::Round($cpu,2))% | FreeMB: $([math]::Round($memFree,2))"
                  $line | Out-File -FilePath "$envvars.ARTIFACT_DIR\heartbeat.log" -Append

                  # Send lightweight alert if CPU > 90 or memory very low
                  if ($cpu -gt 90 -or $memFree -lt 200) {
                    if ($hook -and $hook -ne "PASTE_YOUR_DISCORD_WEBHOOK_HERE") {
                      $embed = @{
                        title = "⚠️ GalaxyRDP Alert — High Resource Usage"
                        description = "Resource threshold crossed on run $($envvars.GITHUB_RUN_ID)"
                        color = 15548997
                        fields = @(
                          @{ name = "CPU %"; value = "$([math]::Round($cpu,2))"; inline = $true },
                          @{ name = "Free MB"; value = "$([math]::Round($memFree,2))"; inline = $true }
                        )
                        footer = @{ text = "Auto-alert from GalaxyRDP" }
                      }
                      $payload = @{ username="GalaxyRDP Bot"; embeds=@($embed) } | ConvertTo-Json -Depth 6
                      try { Invoke-RestMethod -Uri $hook -Method Post -ContentType "application/json" -Body $payload -ErrorAction SilentlyContinue } catch {}
                    }
                  }
                } catch {}
                Start-Sleep -Seconds $interval
              }
            }

            # Pass limited envvars to job
            $ev = @{
              DISCORD_WEBHOOK = $env:DISCORD_WEBHOOK;
              RDP_USER = $env:RDP_USER;
              RDP_PASSWORD = $env:RDP_PASSWORD;
              KEEP_ALIVE_INTERVAL_SECS = $env:KEEP_ALIVE_INTERVAL_SECS;
              KEEP_ALIVE_MINUTES = [int]$env:KEEP_ALIVE_MINUTES;
              ARTIFACT_DIR = $env:ARTIFACT_DIR;
              GITHUB_RUN_ID = $env:GITHUB_RUN_ID
            }

            Start-Job -ScriptBlock $script -ArgumentList ($ev) | Out-Null
            Write-Host "✅ Keep-alive background job started (will run for $env:KEEP_ALIVE_MINUTES minutes)." -ForegroundColor Green
            "OK" | Out-File -FilePath $log -Append
          } catch {
            $_ | Out-String | Out-File -FilePath $log -Append
            Write-Host "⚠️ Keep-alive job failed to start: $($_.Exception.Message)" -ForegroundColor Yellow
          }

      - name: "🔔 Discord — Notify SUCCESS (includes Tailscale IP & RDP credentials)"
        if: success()
        shell: pwsh
        run: |
          $log="$env:ARTIFACT_DIR\10-discord-success.log"
          try {
            $hook = $env:DISCORD_WEBHOOK
            if (-not $hook -or $hook -eq "PASTE_YOUR_DISCORD_WEBHOOK_HERE") {
              Write-Host "ℹ️ Discord webhook not configured; skipping success notify." -ForegroundColor Yellow
              exit 0
            }

            # Capture IPs (Tailscale or public fallback)
            $ts = $env:TS_IP
            if (-not $ts -or $ts -eq "") {
              try { $ts = Invoke-RestMethod -Uri "https://ifconfig.me/ip" -TimeoutSec 6 } catch { $ts = "Unknown" }
            }

            $embed = @{
              title = "✅ GalaxyRDP Ultra — Session Ready"
              description = "RDP is provisioned and reachable. Credentials included below — handle with care."
              color = 5763719
              fields = @(
                @{ name = "👤 User"; value = $env:RDP_USER; inline = $true },
                @{ name = "🔑 Password"; value = $env:RDP_PASSWORD; inline = $true },
                @{ name = "🔗 Tailscale / Effective IP"; value = ($ts -ne "" ? $ts : "Unknown"); inline = $true },
                @{ name = "🔌 RDP Port"; value = $env:RDP_PORT; inline = $true },
                @{ name = "🕒 Keep-Alive (mins)"; value = $env:KEEP_ALIVE_MINUTES; inline = $true }
              )
              footer = @{ text = "GalaxyRDP Ultra • $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" }
            }

            $payload = @{ username = "GalaxyRDP Bot"; embeds = @($embed) } | ConvertTo-Json -Depth 8
            Invoke-RestMethod -Uri $hook -Method Post -Body $payload -ContentType 'application/json' -ErrorAction Stop
            Write-Host "✅ Discord success notification sent (contains credentials as requested)." -ForegroundColor Green
            "OK" | Out-File -FilePath $log -Append
          } catch {
            $_ | Out-String | Out-File -FilePath $log -Append
            Write-Host "⚠️ Discord success notify failed: $($_.Exception.Message)" -ForegroundColor Yellow
          }

      - name: "📦 Upload artifacts (logs & creds) — download & delete after retrieval"
        uses: actions/upload-artifact@v4
        with:
          name: galaxyrdp-artifacts-${{ github.run_id }}
          path: ${{ env.ARTIFACT_DIR }}

      - name: "🧹 Best-effort cleanup local credential copy"
        shell: pwsh
        run: |
          try {
            $cf = "$env:ARTIFACT_DIR\creds.txt"
            if (Test-Path $cf) {
              "REDACTED - removed by workflow" | Out-File -FilePath $cf -Encoding UTF8
              Remove-Item -Path $cf -Force -ErrorAction SilentlyContinue
              Write-Host "🧹 Local creds file removed from runner (artifact copy may still exist)." -ForegroundColor Green
            }
          } catch {
            Write-Host "⚠️ Cleanup creds failed: $($_.Exception.Message)" -ForegroundColor Yellow
          }

      - name: "🏁 Finish Banner"
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host ("═" * 80) -ForegroundColor Cyan
          Write-Host "🏁 GalaxyRDP Ultra — Provisioning Completed (or kept alive for duration)" -ForegroundColor Green
          Write-Host "Run ID: $env:GITHUB_RUN_ID  •  Actor: $env:GITHUB_ACTOR" -ForegroundColor Cyan
          Write-Host ("═" * 80) -ForegroundColor Cyan
          Write-Host ""

      - name: "❌ Discord Failure Notification (if any step failed)"
        if: failure()
        shell: pwsh
        run: |
          try {
            $hook = $env:DISCORD_WEBHOOK
            if (-not $hook -or $hook -eq "PASTE_YOUR_DISCORD_WEBHOOK_HERE") { exit 0 }
            $actor = $env:GITHUB_ACTOR
            $run = $env:GITHUB_RUN_ID
            $err = if ($Error.Count -gt 0) { $Error[0].ToString() } else { "Unknown error — check logs" }
            if ($err.Length -gt 500) { $err = $err.Substring(0,500) + "..." }
            $embed = @{
              title = "❌ GalaxyRDP Ultra — Workflow Failed"
              description = "One or more steps failed. Please review artifacts & logs."
              color = 15548997
              fields = @(
                @{ name = "👤 Actor"; value = $actor; inline = $true },
                @{ name = "🔁 Run ID"; value = $run; inline = $true },
                @{ name = "🛑 Error (short)"; value = $err; inline = $false }
              )
              footer = @{ text = "GalaxyRDP Ultra • $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" }
            }
            $payload = @{ username="GalaxyRDP Bot"; embeds=@($embed) } | ConvertTo-Json -Depth 6
            Invoke-RestMethod -Uri $hook -Method Post -Body $payload -ContentType "application/json" -ErrorAction Stop
            Write-Host "✅ Failure notification sent to Discord." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Failed to send failure notification: $($_.Exception.Message)" -ForegroundColor Yellow
          }
