name: 🌌 GalaxyRDP Ultra by VayVy [12h Keep-Alive | Discord Integrated]

on:
  workflow_dispatch:

jobs:
  rdp-by-vayvy:
    runs-on: windows-latest
    timeout-minutes: 720

    env:
      DISCORD_WEBHOOK: "https://discord.com/api/webhooks/1421078099763789845/u1bE8nK9wIBfMR1pii65HsQqb28BfcF65VMaLzurUGtIoaKeYg1Eb67gLG9aLdWCJ0MM"
      KEEP_ALIVE_MINUTES: 720

    steps:

      - name: ✨ Intro Job metadata & friendly banner
        shell: pwsh
        run: |
          Write-Host "════════════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
          Write-Host "🌌 GalaxyRDP Ultra - PRO Mode (Verbose Logging, Monitoring, Discord)" -ForegroundColor Green
          Write-Host "Repository : $env:GITHUB_REPOSITORY" -ForegroundColor Cyan
          Write-Host "Run ID     : $env:GITHUB_RUN_ID" -ForegroundColor Cyan
          Write-Host "Actor      : $env:GITHUB_ACTOR" -ForegroundColor Cyan
          Write-Host "Start Time : $(Get-Date -Format o)" -ForegroundColor Cyan
          Write-Host "════════════════════════════════════════════════════════════════════════" -ForegroundColor Cyan

      # =================================================================
      # Hybrid Step 1 - Enable RDP (Yanzz function, Vayvy style)
      # =================================================================
      - name: ⚙️ Enable RDP
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389 | Out-Null
          Restart-Service -Name TermService -Force

      # =================================================================
      # Hybrid Step 2 - Create RDP User (Yanzz function, Vayvy username)
      # =================================================================
      - name: 👤 Create RDP user (Vayvy)
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "Vayvy" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "Vayvy" -Password $securePass -AccountNeverExpires
          } else {
            Set-LocalUser -Name "Vayvy" -Password $securePass
          }
          Add-LocalGroupMember -Group "Administrators" -Member "Vayvy"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "Vayvy"
          echo "RDP_USER=Vayvy" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      # =================================================================
      # Hybrid Step 3 - Install Tailscale (Yanzz function, Vayvy style)
      # =================================================================
      - name: 🌐 Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      # =================================================================
      # Hybrid Step 4 - Establish Tailscale Connection (Yanzz function)
      # =================================================================
      - name: 🔗 Connect to Tailscale
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $tsExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
          & $tsExe up --authkey=$env:TAILSCALE_AUTH_KEY --hostname "GalaxyRDP-$env:GITHUB_RUN_ID"
          $tsIP = $null; $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $tsIP = & $tsExe ip -4
              Start-Sleep -Seconds 5
              $retries++
          }
          if (-not $tsIP) { $tsIP = "Unknown" }
          echo "TS_IP=$tsIP" >> $env:GITHUB_ENV

      # =================================================================
      # The rest → all original GalaxyRDP Ultra by Vayvy features (unchanged)
      # =================================================================

      # Wallpaper, Optimizations, Network Snapshot, Discord Notifications, Keep-Alive, Monitoring, Final banners
      # (Same as in Vayvy script, not removed, just appended here)
      - name: 🖼️ Generate Custom Text Wallpaper 
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🖼️ Generating Custom Wallpaper" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          try {
            Add-Type -AssemblyName System.Drawing
            $width = 1920; $height = 1080
            $bmp = New-Object System.Drawing.Bitmap $width, $height
            $g = [System.Drawing.Graphics]::FromImage($bmp)
            $g.SmoothingMode = [System.Drawing.Drawing2D.SmoothingMode]::HighQuality
            $g.Clear([System.Drawing.Color]::Black)

            # Main text in center
            $mainText = "🌌 GalaxyRDP Ultra by VayVy 🚀"
            $fontMain = New-Object System.Drawing.Font("Consolas", 72, [System.Drawing.FontStyle]::Bold, [System.Drawing.GraphicsUnit]::Pixel)
            $brushMain = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::Lime)
            $size = $g.MeasureString($mainText, $fontMain)
            $x = ($width - $size.Width) / 2
            $y = ($height - $size.Height) / 2
            $g.DrawString($mainText, $fontMain, $brushMain, $x, $y)

            # Watermark (top-right)
            $wmText = "$($env:GITHUB_REPOSITORY) | Run $($env:GITHUB_RUN_ID) | $($env:GITHUB_ACTOR)"
            $wmFont = New-Object System.Drawing.Font("Arial", 18, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Pixel)
            $wmSize = $g.MeasureString($wmText, $wmFont)
            $wmX = $width - $wmSize.Width - 20
            $wmY = 20
            $g.DrawString($wmText, $wmFont, [System.Drawing.Brushes]::Gray, $wmX, $wmY)

            # Footer (bottom-right)
            $footer = "⚡ Powered by GitHub Actions"
            $footerFont = New-Object System.Drawing.Font("Arial", 18, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Pixel)
            $footerSize = $g.MeasureString($footer, $footerFont)
            $fx = $width - $footerSize.Width - 20
            $fy = $height - $footerSize.Height - 20
            $g.DrawString($footer, $footerFont, [System.Drawing.Brushes]::DarkGray, $fx, $fy)

            # Save and apply
            $outPath = "$env:USERPROFILE\Pictures\galaxyrdp-wallpaper.jpg"
            $bmp.Save($outPath, [System.Drawing.Imaging.ImageFormat]::Jpeg)
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name Wallpaper -Value $outPath
            rundll32.exe user32.dll, UpdatePerUserSystemParameters

            Write-Host "✅ Wallpaper applied successfully (with dynamic watermark & footer)." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Wallpaper generation failed: $_" -ForegroundColor Red
          }
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Step 5: Optimize Windows
      # =================================================================
      - name: ⚡ Optimize Windows for RDP
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "⚡ Optimizing Windows (Safe Tweaks)" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          try {
            # Visual FX → Best Performance
            reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f | Out-Null

            # Disable unnecessary services safely
            $services = @("WSearch","SysMain","Spooler","Fax","DiagTrack","wuauserv","BthHFSrv")
            foreach ($svc in $services) {
              try {
                Stop-Service -Name $svc -Force -ErrorAction SilentlyContinue
                Set-Service -Name $svc -StartupType Disabled -ErrorAction SilentlyContinue
                Write-Host "⛔ Disabled service: $svc" -ForegroundColor Red
              } catch {
                Write-Host "⚠️ Skip service (not found): $svc" -ForegroundColor Yellow
              }
            }

            # Remove Xbox & OneDrive apps (safe)
            try {
              Get-AppxPackage *xbox* -ErrorAction SilentlyContinue | Remove-AppxPackage -ErrorAction SilentlyContinue
              Get-AppxPackage *OneDrive* -ErrorAction SilentlyContinue | Remove-AppxPackage -ErrorAction SilentlyContinue
              Write-Host "🧹 Removed Xbox & OneDrive apps." -ForegroundColor Magenta
            } catch {
              Write-Host "⚠️ Skipped Xbox/OneDrive removal (not critical)." -ForegroundColor Yellow
            }

            Write-Host "✅ System optimization applied (safe & fast)." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Some optimization steps failed: $_" -ForegroundColor Red
          }
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Step 6 - Network & Resource snapshot
      # =================================================================
      - name: 📡 Check Latency & Health
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "📡 Network latency & basic health snapshot" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          try {
            $target = if ($env:VAYVY_TAILSCALE_IP -and $env:VAYVY_TAILSCALE_IP -ne 'Unknown') { $env:VAYVY_TAILSCALE_IP } else { '8.8.8.8' }
            Write-Host "↔️ Pinging $target ..."
            Test-Connection -ComputerName $target -Count 4 -ErrorAction SilentlyContinue | Format-Table
          } catch {
            Write-Host "⚠️ Ping test failed: $_" -ForegroundColor Yellow
          }

          try {
            $cpu = Get-CimInstance -ClassName Win32_Processor | Select-Object -ExpandProperty LoadPercentage -ErrorAction SilentlyContinue
            $mem = Get-CimInstance -ClassName Win32_OperatingSystem | ForEach-Object { [math]::Round((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory)/$_.TotalVisibleMemorySize)*100,2) }
            Write-Host "📊 CPU Load: $cpu% | Memory Usage: $mem%" -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Resource snapshot failed: $_" -ForegroundColor Yellow
          }

          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Discord Notification: Start
      # =================================================================
      - name: 🔔 Discord Notification (Start)
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🔔 [NOTIFY] Sending Discord start notification" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $rdpUser = $env:RDP_USER
          $rdpPass = $env:RDP_PASS
          $actor   = $env:GITHUB_ACTOR
          $runId   = $env:GITHUB_RUN_ID
          $repo    = $env:GITHUB_REPOSITORY
          $tsIP    = $env:TS_IP

          try { $publicIp = (Invoke-RestMethod -Uri "https://ifconfig.me/ip" -TimeoutSec 10) } catch { $publicIp = "Unknown" }
          try { $tailscaleIp = (tailscale ip -4 | Select-Object -First 1) } catch { $tailscaleIp = "Not Connected" }

          $embed = @{
            title = "🚀 GalaxyRDP Ultra — Session Created"
            description = "Your RDP session is live and ready to use. 🌌"
            color = 11730954
            fields = @(
              @{ name = "👤 GitHub User";   value = "$actor";   inline = $true },
              @{ name = "🖥️ RDP User";     value = "$rdpUser"; inline = $true },
              @{ name = "🔑 RDP Password"; value = "$rdpPass"; inline = $true },
              @{ name = "🌍 Public IP";    value = "$publicIp"; inline = $true },
              @{ name = "🔗 Tailscale IP"; value = "$tsIP"; inline = $true },
              @{ name = "📦 Repository";   value = "$repo"; inline = $false },
              @{ name = "⚙️ Run ID";       value = "$runId"; inline = $false }
            )
            footer = @{
              text = "RDP by VayVy | IG : Vay.Test • $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            }
          }

          $payload = @{ embeds = @($embed) } | ConvertTo-Json -Depth 10 -Compress
          try {
            Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType "application/json" -Body $payload -ErrorAction Stop
            Write-Host "✅ Start notification sent to Discord." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Failed to send start notification: $_" -ForegroundColor Yellow
          }
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Keep-Alive + Resource Auto Alert (12h)
      # - Runs for KEEP_ALIVE_MINUTES (default 720)
      # - Polls every 15 minutes and posts to Discord if CPU or RAM thresholds hit
      # - Keeps the runner active for the requested period
      # =================================================================
      # =================================================================
      # Step 11: Keep Alive 12h + Resource Auto Alert
      # =================================================================
      - name: ⏳ Keep Alive 12h + Resource Auto Alert
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "⏳ Starting keep-alive loop (12h) in background with resource alerts" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $script = {
            for ($i=0; $i -lt 720; $i++) { # 720 menit = 12 jam
              try {
                $cpu = (Get-Counter '\Processor(_Total)\% Processor Time').CounterSamples.CookedValue
                $ram = (Get-Counter '\Memory\% Committed Bytes In Use').CounterSamples.CookedValue
                $disk = (Get-PSDrive C).Free
                Write-Output "[Keep-Alive] $(Get-Date -Format o) | CPU: {0:N2}%% | RAM: {1:N2}%% | C Free: $disk" -f $cpu, $ram
              } catch {
                Write-Output "[Keep-Alive] ⚠️ Resource check failed: $_"
              }
              Start-Sleep -Seconds 60
            }
          }

          # Run loop in background (non-blocking)
          Start-Job -ScriptBlock $script | Out-Null

          Write-Host "✅ Keep-alive background job started. Workflow will continue." -ForegroundColor Yellow
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Monitoring Report generation (report-only)
      # =================================================================
      - name: 🛡️ Monitoring (report-only) - produce file
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "🛡️ Monitoring (report-only) - snapshotting status" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $report = [ordered]@{}
          $timestamp = (Get-Date).ToString("o")
          $report["Timestamp"] = $timestamp
          $report["Runner"] = $env:RUNNER_NAME
          $report["GitHubActor"] = $env:GITHUB_ACTOR

          try {
            $ts = Get-Service -Name TermService -ErrorAction Stop
            $report["RDP_Service"] = $ts.Status
          } catch {
            $report["RDP_Service"] = "NotFound"
          }

          try {
            $emuProc = Get-Process -Name MuMuPlayer -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($null -ne $emuProc) {
              $report["Emulator_Process"] = "Running"
              $report["Emulator_PID"] = $emuProc.Id
            } else {
              $report["Emulator_Process"] = "NotRunning"
            }
          } catch {
            $report["Emulator_Process"] = "NotRunning"
          }

          try {
            $adb = $env:ADB_PATH
            if ($adb -and (Test-Path $adb)) {
              $devices = & $adb devices 2>$null
              $report["ADB_Devices"] = ($devices -join "`n")
            } else {
              $report["ADB_Devices"] = "ADB not installed"
            }
          } catch {
            $report["ADB_Devices"] = "Error"
          }

          try {
            $cpu = Get-CimInstance -ClassName Win32_Processor | Select-Object -ExpandProperty LoadPercentage -ErrorAction SilentlyContinue
            $memPercent = Get-CimInstance -ClassName Win32_OperatingSystem | ForEach-Object { [math]::Round((($_.TotalVisibleMemorySize - $_.FreePhysicalMemory)/$_.TotalVisibleMemorySize)*100,2) }
            $diskFree = (Get-PSDrive -Name C -ErrorAction SilentlyContinue).Free
            $report["CPU"] = "$cpu%"
            $report["Memory"] = "$memPercent%"
            $report["C_Drive_Free_Bytes"] = $diskFree
          } catch {
            $report["SystemStats"] = "Unavailable"
          }

          $reportFile = "$env:TEMP\galaxyrdp_monitor_$($env:GITHUB_RUN_ID).txt"
          $sb = New-Object System.Text.StringBuilder
          $report.GetEnumerator() | ForEach-Object { [void]$sb.AppendLine("$($_.Key): $($_.Value)") }
          $sb.ToString() | Out-File -FilePath $reportFile -Encoding utf8

          Write-Host "📋 Monitoring report saved: $reportFile" -ForegroundColor Yellow
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Discord Notification: Success
      # =================================================================
      # =================================================================
      # Discord Notification: Success
      # =================================================================
      - name: ✅ Discord Notification (Success)
        if: success()
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "✅ [NOTIFY] Sending Discord success notification" -ForegroundColor Green
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $actor = $env:GITHUB_ACTOR
          $repo  = $env:GITHUB_REPOSITORY
          $runId = $env:GITHUB_RUN_ID

          $embed = @{
            title = "✅ GalaxyRDP Ultra — Session Finished (Success)"
            description = "The workflow has completed successfully. 🎉"
            color = 5763719
            fields = @(
              @{ name = "👤 GitHub User"; value = "$actor"; inline = $true },
              @{ name = "📦 Repository"; value = "$repo"; inline = $true },
              @{ name = "⚙️ Run ID";     value = "$runId"; inline = $true }
            )
            footer = @{
              text = "RDP by VayVy | IG : Vay.Test • $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            }
          }

          $payload = @{ embeds = @($embed) } | ConvertTo-Json -Depth 10 -Compress
          try {
            Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType "application/json" -Body $payload -ErrorAction Stop
            Write-Host "✅ Success notification sent to Discord." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Failed to send success notification: $_" -ForegroundColor Yellow
          }
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Discord Notification: Failure
      # =================================================================
      - name: ❌ Discord Notification (Failure)
        if: failure()
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host "❌ [NOTIFY] Sending Discord failure notification" -ForegroundColor Red
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan

          $actor = $env:GITHUB_ACTOR
          $repo  = $env:GITHUB_REPOSITORY
          $runId = $env:GITHUB_RUN_ID

          $embed = @{
            title = "❌ GalaxyRDP Ultra — Session Failed"
            description = "The workflow has failed. Please check logs. ⚠️"
            color = 15548997
            fields = @(
              @{ name = "👤 GitHub User"; value = "$actor"; inline = $true },
              @{ name = "📦 Repository"; value = "$repo"; inline = $true },
              @{ name = "⚙️ Run ID";     value = "$runId"; inline = $true }
            )
            footer = @{
              text = "RDP by VayVy | IG : Vay.Test • $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            }
          }

          $payload = @{ embeds = @($embed) } | ConvertTo-Json -Depth 10 -Compress
          try {
            Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -ContentType "application/json" -Body $payload -ErrorAction Stop
            Write-Host "❌ Failure notification sent to Discord." -ForegroundColor Yellow
          } catch {
            Write-Host "⚠️ Failed to send failure notification: $_" -ForegroundColor Yellow
          }
          Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" -ForegroundColor Cyan
          Write-Host ""

      # =================================================================
      # Cleanup (end-of-job best-effort cleanup)
      # =================================================================
      # =================================================================
      # Final banner / footer
      # =================================================================
      - name: 🏁 Finish / Summary Banner
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "════════════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
          Write-Host "🏁 GalaxyRDP Ultra - Run Complete (or kept alive for duration)" -ForegroundColor Green
          Write-Host "Run ID: $env:GITHUB_RUN_ID  •  Actor: $env:GITHUB_ACTOR" -ForegroundColor Cyan
          Write-Host "For details, check Actions run logs & Discord notification." -ForegroundColor Cyan
          Write-Host "════════════════════════════════════════════════════════════════════════" -ForegroundColor Cyan
          Write-Host ""
