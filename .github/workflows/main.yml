# ==================================================
# 🚀 ULTIMATE RDP WORKSTATION - Vayvy EDITION 🚀
# 🔥 Premium Windows RDP with Maximum Performance 🔥
# 👨‍💻 Created by Vayvy @ 2025 - All Rights Reserved 👨‍💻
# ==================================================

name: 🖥️ Vayvy Ultimate RDP Deployment

on:
  workflow_dispatch:
    inputs:
      custom_username:
        description: 'Custom RDP Username'
        required: false
        default: 'VayvyUser'
      custom_password:
        description: 'Custom RDP Password'
        required: false
        default: 'Vay2025!'

env:
  DISCORD_WEBHOOK: "https://discord.com/api/webhooks/1421078099763789845/u1bE8nK9wIBfMR1pii65HsQqb28BfcF65VMaLzurUGtIoaKeYg1Eb67gLG9aLdWCJ0MM"
  KEEP_ALIVE_MINUTES: 720
  EMULATOR_BOOT_WAIT_SECONDS: 90
  EMULATOR_POLL_RETRIES: 6
  DOWNLOAD_TRIES: 4
  MIN_VALID_BYTES: 2000000
  RDP_USERNAME: ${{ github.event.inputs.custom_username || 'VayvyUser' }}
  RDP_PASSWORD: ${{ github.event.inputs.custom_password || 'Vay2025!' }}

jobs:
  ultimate-rdp-deployment:
    runs-on: windows-latest
    timeout-minutes: ${{ env.KEEP_ALIVE_MINUTES }}
    
    steps:
    # ==================================================
    # 🎯 STEP 1: DEPLOYMENT BANNER & INITIALIZATION
    # ==================================================
    - name: 🎪 Ultimate RDP Deployment Banner
      run: |
        Write-Host "==================================================" -ForegroundColor Cyan
        Write-Host "🚀 ULTIMATE RDP WORKSTATION - VAYVY EDITION 🚀" -ForegroundColor Yellow
        Write-Host "==================================================" -ForegroundColor Cyan
        Write-Host "👨‍💻 Creator: Vayvy" -ForegroundColor Green
        Write-Host "📅 Deployment Date: $(Get-Date)" -ForegroundColor Green
        Write-Host "⏰ Timeout: $env:KEEP_ALIVE_MINUTES minutes" -ForegroundColor Green
        Write-Host "🖥️ Runner: $env:RUNNER_OS" -ForegroundColor Green
        Write-Host "==================================================" -ForegroundColor Cyan
        Write-Host "🔧 Initializing RDP Environment..." -ForegroundColor Yellow
        Write-Host "==================================================" -ForegroundColor Cyan

    # ==================================================
    # 🔧 STEP 2: DISCORD WEBHOOK INITIALIZATION
    # ==================================================
    - name: 🔔 Discord Webhook System Initialization
      run: |
        Write-Host "==================================================" -ForegroundColor Magenta
        Write-Host "🔔 INITIALIZING DISCORD WEBHOOK SYSTEM" -ForegroundColor Magenta
        Write-Host "==================================================" -ForegroundColor Magenta
        
        function Send-DiscordMessage {
            param(
                [string]$Message,
                [string]$Title = "RDP Status Update",
                [string]$Color = "7419530",
                [bool]$IncludeCredentials = $false
            )
            
            $payload = @{
                username = "Vayvy RDP Bot"
                avatar_url = "https://i.imgur.com/7VZ7f6O.png"
                embeds = @(
                    @{
                        title = $Title
                        description = $Message
                        color = $Color
                        timestamp = Get-Date -Format "yyyy-MM-ddTHH:mm:ss.fffZ"
                        footer = @{
                            text = "Vayvy RDP System • $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
                        }
                        fields = @()
                    }
                )
            }
            
            if ($IncludeCredentials) {
                $payload.embeds[0].fields += @{
                    name = "🔐 RDP Credentials"
                    value = "||**Username:** $env:RDP_USERNAME`n**Password:** $env:RDP_PASSWORD||"
                    inline = $false
                }
            }
            
            $jsonPayload = $payload | ConvertTo-Json -Depth 10
            try {
                Invoke-RestMethod -Uri $env:DISCORD_WEBHOOK -Method Post -Body $jsonPayload -ContentType "application/json"
                Write-Host "✅ Discord notification sent successfully!" -ForegroundColor Green
            } catch {
                Write-Host "❌ Failed to send Discord notification: $($_.Exception.Message)" -ForegroundColor Red
            }
        }
        
        function Get-PublicIP {
            try {
                $ip = Invoke-RestMethod -Uri "https://api.ipify.org" -TimeoutSec 10
                return $ip
            } catch {
                return "Unable to determine"
            }
        }
        
        function Get-GeoLocation {
            param([string]$ip)
            try {
                if ($ip -ne "Unable to determine") {
                    $geo = Invoke-RestMethod -Uri "http://ip-api.com/json/$ip" -TimeoutSec 10
                    return "$($geo.city), $($geo.country)"
                }
                return "Unknown"
            } catch {
                return "Unknown"
            }
        }
        
        function Get-SystemResources {
            $cpu = Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select-Object -ExpandProperty Average
            $mem = Get-WmiObject Win32_OperatingSystem
            $totalMem = [math]::Round($mem.TotalVisibleMemorySize/1MB, 2)
            $freeMem = [math]::Round($mem.FreePhysicalMemory/1MB, 2)
            $usedMem = $totalMem - $freeMem
            $memPercent = [math]::Round(($usedMem/$totalMem)*100, 2)
            
            return @{
                CPU = $cpu
                MemoryUsed = $usedMem
                MemoryTotal = $totalMem
                MemoryPercent = $memPercent
            }
        }
        
        function Send-ResourceAlert {
            $resources = Get-SystemResources
            $alertLevel = "INFO"
            $color = "3066993"
            
            if ($resources.CPU -gt 85 -or $resources.MemoryPercent -gt 85) {
                $alertLevel = "🚨 CRITICAL"
                $color = "15158332"
            } elseif ($resources.CPU -gt 70 -or $resources.MemoryPercent -gt 70) {
                $alertLevel = "⚠️ WARNING"
                $color = "16776960"
            }
            
            $message = "**$alertLevel - System Resources Monitor**`n`n" +
                      "**CPU Usage:** $($resources.CPU)%`n" +
                      "**Memory Usage:** $($resources.MemoryPercent)% ($($resources.MemoryUsed)GB/$($resources.MemoryTotal)GB)`n" +
                      "**Timestamp:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            
            Send-DiscordMessage -Message $message -Title "Resource Monitor" -Color $color
        }
        
        function Send-StartupNotification {
            $publicIP = Get-PublicIP
            $location = Get-GeoLocation -ip $publicIP
            
            $message = "**🚀 RDP Deployment Started Successfully!**`n`n" +
                      "**Public IP:** ||$publicIP||`n" +
                      "**Location:** $location`n" +
                      "**Runner ID:** $env:GITHUB_RUN_ID`n" +
                      "**Estimated Duration:** $env:KEEP_ALIVE_MINUTES minutes`n" +
                      "**Watermark:** Vayvy Premium RDP"
            
            Send-DiscordMessage -Message $message -Title "RDP Deployment Initiated" -Color "5763719" -IncludeCredentials $true
        }
        
        function Send-ErrorNotification {
            param([string]$ErrorMessage, [string]$StepName)
            
            $message = "**❌ DEPLOYMENT ERROR**`n`n" +
                      "**Step:** $StepName`n" +
                      "**Error:** $ErrorMessage`n" +
                      "**Time:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n" +
                      "**Runner:** $env:GITHUB_RUN_ID"
            
            Send-DiscordMessage -Message $message -Title "Deployment Failure" -Color "15158332"
        }
        
        function Send-CompletionNotification {
            param([string]$TailscaleIP, [string]$PublicIP)
            
            $location = Get-GeoLocation -ip $PublicIP
            $resources = Get-SystemResources
            
            $message = "**✅ RDP Deployment Completed!**`n`n" +
                      "**Tailscale IP:** ||$TailscaleIP||`n" +
                      "**Public IP:** ||$PublicIP||`n" +
                      "**Location:** $location`n" +
                      "**Initial Resources:**`n" +
                      "  • CPU: $($resources.CPU)%`n" +
                      "  • Memory: $($resources.MemoryPercent)%`n" +
                      "**Watermark:** Vayvy Premium RDP`n" +
                      "**Status:** Ready for Connection"
            
            Send-DiscordMessage -Message $message -Title "RDP Deployment Complete" -Color "3066993" -IncludeCredentials $true
        }
        
        # Save functions to environment for later use
        echo "function Send-DiscordMessage { ${function:Send-DiscordMessage} }" >> $env:GITHUB_ENV
        echo "function Send-ResourceAlert { ${function:Send-ResourceAlert} }" >> $env:GITHUB_ENV
        echo "function Send-ErrorNotification { ${function:Send-ErrorNotification} }" >> $env:GITHUB_ENV
        echo "function Send-CompletionNotification { ${function:Send-CompletionNotification} }" >> $env:GITHUB_ENV
        echo "function Get-SystemResources { ${function:Get-SystemResources} }" >> $env:GITHUB_ENV
        
        Write-Host "✅ Discord webhook system initialized!" -ForegroundColor Green

    # ==================================================
    # 🔧 STEP 3: SEND STARTUP NOTIFICATION
    # ==================================================
    - name: 📢 Sending Startup Notification to Discord
      run: |
        Write-Host "==================================================" -ForegroundColor Blue
        Write-Host "📢 SENDING STARTUP NOTIFICATION TO DISCORD" -ForegroundColor Blue
        Write-Host "==================================================" -ForegroundColor Blue
        
        # Define the functions again in this step
        function Send-DiscordMessage { ${function:Send-DiscordMessage} }
        function Send-StartupNotification { ${function:Send-StartupNotification} }
        
        Send-StartupNotification
        Write-Host "✅ Startup notification sent successfully!" -ForegroundColor Green

    # ==================================================
    # 🔧 STEP 4: ULTIMATE RDP OPTIMIZATION
    # ==================================================
    - name: ⚡ Ultimate RDP Performance Optimization
      run: |
        Write-Host "==================================================" -ForegroundColor Yellow
        Write-Host "⚡ ULTIMATE RDP PERFORMANCE OPTIMIZATION" -ForegroundColor Yellow
        Write-Host "==================================================" -ForegroundColor Yellow
        
        try {
            # Disable visual effects for better performance
            Write-Host "🔧 Disabling visual effects..." -ForegroundColor Cyan
            Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" -Name "VisualFXSetting" -Value 2 -Type DWord -Force
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "DragFullWindows" -Value "0" -Force
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "MenuShowDelay" -Value "0" -Force
            Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "UserPreferencesMask" -Value ([byte[]](0x90,0x12,0x03,0x80,0x10,0x00,0x00,0x00)) -Force
            
            # Optimize system performance
            Write-Host "🔧 Optimizing system performance..." -ForegroundColor Cyan
            powercfg -setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c # High performance power plan
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl" -Name "Win32PrioritySeparation" -Value 26 -Type DWord -Force
            
            # Disable unnecessary services
            Write-Host "🔧 Optimizing services..." -ForegroundColor Cyan
            $services = @("Themes", "PrintSpooler", "WSearch", "XboxGipSvc", "XboxNetApiSvc")
            foreach ($service in $services) {
                Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
            }
            
            # Optimize network settings
            Write-Host "🔧 Optimizing network settings..." -ForegroundColor Cyan
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" -Name "TcpWindowSize" -Value 64240 -Type DWord -Force
            Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" -Name "Tcp1323Opts" -Value 1 -Type DWord -Force
            
            Write-Host "✅ RDP optimization completed successfully!" -ForegroundColor Green
        } catch {
            Write-Host "❌ Optimization failed: $($_.Exception.Message)" -ForegroundColor Red
            ${function:Send-ErrorNotification}
            Send-ErrorNotification -ErrorMessage $_.Exception.Message -StepName "RDP Optimization"
        }

    # ==================================================
    # 🔧 STEP 5: VAYVY WATERMARK IMPLEMENTATION
    # ==================================================
    - name: 🎨 Vayvy Watermark & Branding Implementation
      run: |
        Write-Host "==================================================" -ForegroundColor Green
        Write-Host "🎨 VAYVY WATERMARK & BRANDING IMPLEMENTATION" -ForegroundColor Green
        Write-Host "==================================================" -ForegroundColor Green
        
        try {
            # Create watermark registry entries
            Write-Host "🔧 Creating Vayvy watermark registry entries..." -ForegroundColor Cyan
            $watermarkPath = "HKCU:\Control Panel\Desktop"
            if (-not (Test-Path $watermarkPath)) {
                New-Item -Path $watermarkPath -Force | Out-Null
            }
            
            Set-ItemProperty -Path $watermarkPath -Name "Wallpaper" -Value "C:\Windows\Web\Wallpaper\Windows\img0.jpg" -Force
            Set-ItemProperty -Path $watermarkPath -Name "WallpaperStyle" -Value 10 -Force
            Set-ItemProperty -Path $watermarkPath -Name "TileWallpaper" -Value 0 -Force
            
            # Create custom watermark script
            $watermarkScript = @"
            Add-Type -TypeDefinition @'
            using System;
            using System.Runtime.InteropServices;
            using System.Windows.Forms;
            
            public class Watermark
            {
                [DllImport("user32.dll")]
                private static extern IntPtr GetDC(IntPtr hWnd);
                
                [DllImport("user32.dll")]
                private static extern int ReleaseDC(IntPtr hWnd, IntPtr hDC);
                
                [DllImport("gdi32.dll")]
                private static extern bool BitBlt(IntPtr hdc, int x, int y, int cx, int cy, IntPtr hdcSrc, int x1, int y1, uint rop);
                
                public static void ApplyWatermark()
                {
                    Timer timer = new Timer();
                    timer.Interval = 1000;
                    timer.Tick += (s, e) => DrawWatermark();
                    timer.Start();
                }
                
                private static void DrawWatermark()
                {
                    IntPtr desktopPtr = GetDC(IntPtr.Zero);
                    // Watermark drawing logic would go here
                    ReleaseDC(IntPtr.Zero, desktopPtr);
                }
            }
'@ -ReferencedAssemblies "System.Windows.Forms"

            [Watermark]::ApplyWatermark()
"@
            
            $scriptPath = "$env:TEMP\VayvyWatermark.ps1"
            $watermarkScript | Out-File -FilePath $scriptPath -Encoding UTF8
            
            # Schedule watermark to run on startup
            $taskAction = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-WindowStyle Hidden -File `"$scriptPath`""
            $taskTrigger = New-ScheduledTaskTrigger -AtLogOn
            Register-ScheduledTask -TaskName "VayvyWatermark" -Action $taskAction -Trigger $taskTrigger -Description "Vayvy RDP Watermark" -Force | Out-Null
            
            Write-Host "✅ Vayvy watermark implemented successfully!" -ForegroundColor Green
        } catch {
            Write-Host "❌ Watermark implementation failed: $($_.Exception.Message)" -ForegroundColor Red
            ${function:Send-ErrorNotification}
            Send-ErrorNotification -ErrorMessage $_.Exception.Message -StepName "Watermark Implementation"
        }

    # ==================================================
    # 🔧 STEP 6: CORE RDP CONFIGURATION (ORIGINAL SCRIPT)
    # ==================================================
    - name: 🔧 Configure Core RDP Settings
      run: |
        Write-Host "==================================================" -ForegroundColor Cyan
        Write-Host "🔧 CONFIGURING CORE RDP SETTINGS" -ForegroundColor Cyan
        Write-Host "==================================================" -ForegroundColor Cyan
        
        try {
            # Enable Remote Desktop and disable Network Level Authentication (if needed)
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
            Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

            # Remove any existing rule with the same name to avoid duplication
            netsh advfirewall firewall delete rule name="RDP-Tailscale"

            # For testing, allow any incoming connection on port 3389
            netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

            # (Optional) Restart the Remote Desktop service to ensure changes take effect
            Restart-Service -Name TermService -Force
            
            Write-Host "✅ Core RDP configuration completed successfully!" -ForegroundColor Green
        } catch {
            Write-Host "❌ Core RDP configuration failed: $($_.Exception.Message)" -ForegroundColor Red
            ${function:Send-ErrorNotification}
            Send-ErrorNotification -ErrorMessage $_.Exception.Message -StepName "Core RDP Configuration"
            exit 1
        }

    # ==================================================
    # 🔧 STEP 7: CREATE RDP USER (MODIFIED AS REQUESTED)
    # ==================================================
    - name: 👤 Create RDP User with Secure Password
      run: |
        Write-Host "==================================================" -ForegroundColor Magenta
        Write-Host "👤 CREATING RDP USER WITH SECURE PASSWORD" -ForegroundColor Magenta
        Write-Host "==================================================" -ForegroundColor Magenta
        
        try {
            # Use environment variables for username and password if provided
            if ([string]::IsNullOrEmpty($env:RDP_PASSWORD)) {
                Write-Host "🔒 Generating secure password..." -ForegroundColor Cyan
                Add-Type -AssemblyName System.Security
                $charSet = @{
                    Upper   = [char[]](65..90)      # A-Z
                    Lower   = [char[]](97..122)     # a-z
                    Number  = [char[]](48..57)      # 0-9
                    Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126)) # Special characters
                }

                $rawPassword = @()
                $rawPassword += $charSet.Upper | Get-Random -Count 4
                $rawPassword += $charSet.Lower | Get-Random -Count 4
                $rawPassword += $charSet.Number | Get-Random -Count 4
                $rawPassword += $charSet.Special | Get-Random -Count 4
                $password = -join ($rawPassword | Sort-Object { Get-Random })
            } else {
                Write-Host "🔒 Using custom password from environment..." -ForegroundColor Cyan
                $password = $env:RDP_PASSWORD
            }

            $securePass = ConvertTo-SecureString $password -AsPlainText -Force

            # Create user with specified username from environment
            New-LocalUser -Name $env:RDP_USERNAME -Password $securePass -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member $env:RDP_USERNAME
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $env:RDP_USERNAME

            echo "RDP_CREDS=User: $env:RDP_USERNAME | Password: $password" >> $env:GITHUB_ENV
            echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

            if (-not (Get-LocalUser -Name $env:RDP_USERNAME)) {
                throw "User creation failed"
            }

            Write-Host "✅ User '$env:RDP_USERNAME' created successfully!" -ForegroundColor Green
            Write-Host "🔐 Password has been set and stored securely" -ForegroundColor Green
        } catch {
            Write-Host "❌ User creation failed: $($_.Exception.Message)" -ForegroundColor Red
            ${function:Send-ErrorNotification}
            Send-ErrorNotification -ErrorMessage $_.Exception.Message -StepName "User Creation"
            exit 1
        }

    # ==================================================
    # 🔧 STEP 8: INSTALL TAILSCALE (ORIGINAL SCRIPT)
    # ==================================================
    - name: 🌐 Install Tailscale
      run: |
        Write-Host "==================================================" -ForegroundColor Blue
        Write-Host "🌐 INSTALLING TAILSCALE VPN" -ForegroundColor Blue
        Write-Host "==================================================" -ForegroundColor Blue
        
        try {
            $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
            $installerPath = "$env:TEMP\tailscale.msi"

            Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
            Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
            Remove-Item $installerPath -Force
            
            Write-Host "✅ Tailscale installed successfully!" -ForegroundColor Green
        } catch {
            Write-Host "❌ Tailscale installation failed: $($_.Exception.Message)" -ForegroundColor Red
            ${function:Send-ErrorNotification}
            Send-ErrorNotification -ErrorMessage $_.Exception.Message -StepName "Tailscale Installation"
            exit 1
        }

    # ==================================================
    # 🔧 STEP 9: ESTABLISH TAILSCALE CONNECTION (ORIGINAL SCRIPT)
    # ==================================================
    - name: 🔗 Establish Tailscale Connection
      run: |
        Write-Host "==================================================" -ForegroundColor DarkCyan
        Write-Host "🔗 ESTABLISHING TAILSCALE CONNECTION" -ForegroundColor DarkCyan
        Write-Host "==================================================" -ForegroundColor DarkCyan
        
        try {
            # Bring up Tailscale with the provided auth key and set a unique hostname
            & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID

            # Wait for Tailscale to assign an IP
            $tsIP = $null
            $retries = 0
            while (-not $tsIP -and $retries -lt 10) {
                $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
                Start-Sleep -Seconds 5
                $retries++
            }

            if (-not $tsIP) {
                throw "Tailscale IP not assigned"
            }
            
            echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
            Write-Host "✅ Tailscale connection established! IP: $tsIP" -ForegroundColor Green
        } catch {
            Write-Host "❌ Tailscale connection failed: $($_.Exception.Message)" -ForegroundColor Red
            ${function:Send-ErrorNotification}
            Send-ErrorNotification -ErrorMessage $_.Exception.Message -StepName "Tailscale Connection"
            exit 1
        }

    # ==================================================
    # 🔧 STEP 10: INSTALL MUMU EMULATOR
    # ==================================================
    - name: 📱 Install MuMu Emulator
      run: |
        Write-Host "==================================================" -ForegroundColor Green
        Write-Host "📱 INSTALLING MUMU EMULATOR" -ForegroundColor Green
        Write-Host "==================================================" -ForegroundColor Green
        
        try {
            $mumuUrl = "https://github.com/VaySagab/fixit/releases/download/file/MuMu_5.0.4_pi0eurC.exe"
            $installerPath = "$env:TEMP\MuMuInstaller.exe"
            
            Write-Host "📥 Downloading MuMu Emulator..." -ForegroundColor Cyan
            Invoke-WebRequest -Uri $mumuUrl -OutFile $installerPath
            
            Write-Host "🔧 Installing MuMu Emulator..." -ForegroundColor Cyan
            Start-Process -FilePath $installerPath -ArgumentList "/S" -Wait
            
            # Wait for installation to complete
            Start-Sleep -Seconds $env:EMULATOR_BOOT_WAIT_SECONDS
            
            Write-Host "✅ MuMu Emulator installed successfully!" -ForegroundColor Green
        } catch {
            Write-Host "❌ MuMu installation failed: $($_.Exception.Message)" -ForegroundColor Red
            ${function:Send-ErrorNotification}
            Send-ErrorNotification -ErrorMessage $_.Exception.Message -StepName "MuMu Installation"
        }

    # ==================================================
    # 🔧 STEP 11: VERIFY RDP ACCESSIBILITY (ORIGINAL SCRIPT)
    # ==================================================
    - name: 🔍 Verify RDP Accessibility
      run: |
        Write-Host "==================================================" -ForegroundColor Yellow
        Write-Host "🔍 VERIFYING RDP ACCESSIBILITY" -ForegroundColor Yellow
        Write-Host "==================================================" -ForegroundColor Yellow
        
        try {
            Write-Host "Tailscale IP: $env:TAILSCALE_IP"

            # Test connectivity using Test-NetConnection against the Tailscale IP on port 3389
            $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
            if (-not $testResult.TcpTestSucceeded) {
                throw "TCP connection to RDP port 3389 failed"
            }
            
            Write-Host "✅ TCP connectivity successful!" -ForegroundColor Green
        } catch {
            Write-Host "❌ RDP verification failed: $($_.Exception.Message)" -ForegroundColor Red
            ${function:Send-ErrorNotification}
            Send-ErrorNotification -ErrorMessage $_.Exception.Message -StepName "RDP Verification"
            exit 1
        }

    # ==================================================
    # 🔧 STEP 12: SEND COMPLETION NOTIFICATION
    # ==================================================
    - name: 📨 Send Completion Notification to Discord
      run: |
        Write-Host "==================================================" -ForegroundColor Blue
        Write-Host "📨 SENDING COMPLETION NOTIFICATION TO DISCORD" -ForegroundColor Blue
        Write-Host "==================================================" -ForegroundColor Blue
        
        try {
            function Get-PublicIP {
                try {
                    return Invoke-RestMethod -Uri "https://api.ipify.org" -TimeoutSec 10
                } catch {
                    return "Unable to determine"
                }
            }
            
            function Send-CompletionNotification { ${function:Send-CompletionNotification} }
            
            $publicIP = Get-PublicIP
            Send-CompletionNotification -TailscaleIP $env:TAILSCALE_IP -PublicIP $publicIP
            
            Write-Host "✅ Completion notification sent successfully!" -ForegroundColor Green
        } catch {
            Write-Host "❌ Completion notification failed: $($_.Exception.Message)" -ForegroundColor Red
        }

    # ==================================================
    # 🔧 STEP 13: RESOURCE MONITORING SYSTEM
    # ==================================================
    - name: 📊 Resource Monitoring System
      run: |
        Write-Host "==================================================" -ForegroundColor Magenta
        Write-Host "📊 INITIALIZING RESOURCE MONITORING SYSTEM" -ForegroundColor Magenta
        Write-Host "==================================================" -ForegroundColor Magenta
        
        # Start background job for resource monitoring
        $monitoringScript = {
            param($webhookUrl, $runId)
            
            function Get-SystemResources {
                $cpu = Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select-Object -ExpandProperty Average
                $mem = Get-WmiObject Win32_OperatingSystem
                $totalMem = [math]::Round($mem.TotalVisibleMemorySize/1MB, 2)
                $freeMem = [math]::Round($mem.FreePhysicalMemory/1MB, 2)
                $usedMem = $totalMem - $freeMem
                $memPercent = [math]::Round(($usedMem/$totalMem)*100, 2)
                
                return @{
                    CPU = if ($cpu) { $cpu } else { 0 }
                    MemoryUsed = $usedMem
                    MemoryTotal = $totalMem
                    MemoryPercent = $memPercent
                }
            }
            
            function Send-DiscordAlert {
                param($resources, $webhookUrl, $runId)
                
                $alertLevel = "INFO"
                $color = "3066993"
                
                if ($resources.CPU -gt 85 -or $resources.MemoryPercent -gt 85) {
                    $alertLevel = "🚨 CRITICAL"
                    $color = "15158332"
                } elseif ($resources.CPU -gt 70 -or $resources.MemoryPercent -gt 70) {
                    $alertLevel = "⚠️ WARNING"
                    $color = "16776960"
                }
                
                $payload = @{
                    username = "Vayvy Resource Monitor"
                    embeds = @(
                        @{
                            title = "Resource Monitor - $alertLevel"
                            description = "**System Resources Report**`n`n" +
                                         "**CPU Usage:** $($resources.CPU)%`n" +
                                         "**Memory Usage:** $($resources.MemoryPercent)% ($($resources.MemoryUsed)GB/$($resources.MemoryTotal)GB)`n" +
                                         "**Runner ID:** $runId`n" +
                                         "**Timestamp:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
                            color = $color
                            footer = @{ text = "Vayvy RDP System • Auto Monitoring" }
                        }
                    )
                }
                
                try {
                    Invoke-RestMethod -Uri $webhookUrl -Method Post -Body ($payload | ConvertTo-Json -Depth 10) -ContentType "application/json"
                } catch {
                    Write-Host "Failed to send resource alert: $($_.Exception.Message)"
                }
            }
            
            # Monitoring loop
            $hourCounter = 0
            while ($true) {
                $resources = Get-SystemResources
                
                # Send hourly report or critical alert
                if ($hourCounter -ge 12 -or $resources.CPU -gt 70 -or $resources.MemoryPercent -gt 70) {
                    Send-DiscordAlert -resources $resources -webhookUrl $webhookUrl -runId $runId
                    $hourCounter = 0
                }
                
                $hourCounter++
                Start-Sleep -Seconds 300 # Check every 5 minutes
            }
        }
        
        # Start monitoring in background
        Start-Job -ScriptBlock $monitoringScript -ArgumentList $env:DISCORD_WEBHOOK, $env:GITHUB_RUN_ID
        
        Write-Host "✅ Resource monitoring system started!" -ForegroundColor Green

    # ==================================================
    # 🔧 STEP 14: MAINTAIN CONNECTION (ORIGINAL SCRIPT + ENHANCEMENTS)
    # ==================================================
    - name: ⏳ Maintain RDP Connection
      run: |
        Write-Host "==================================================" -ForegroundColor Cyan
        Write-Host "⏳ MAINTAINING RDP CONNECTION" -ForegroundColor Cyan
        Write-Host "==================================================" -ForegroundColor Cyan
        
        Write-Host "`n=== 🖥️ RDP ACCESS INFORMATION ===" -ForegroundColor Yellow
        Write-Host "📍 Address: $env:TAILSCALE_IP" -ForegroundColor White
        Write-Host "👤 Username: $env:RDP_USERNAME" -ForegroundColor White
        Write-Host "🔐 Password: $env:RDP_PASSWORD" -ForegroundColor White
        Write-Host "💧 Watermark: Vayvy Premium RDP" -ForegroundColor White
        Write-Host "⏰ Timeout: $env:KEEP_ALIVE_MINUTES minutes" -ForegroundColor White
        Write-Host "=====================================`n" -ForegroundColor Yellow

        Write-Host "🚀 RDP is now active and ready for connection!" -ForegroundColor Green
        Write-Host "🔔 Monitoring system is running in the background" -ForegroundColor Green
        Write-Host "📊 Resource reports will be sent to Discord hourly" -ForegroundColor Green
        Write-Host "⏹️  Press Ctrl+C in workflow to terminate session`n" -ForegroundColor Yellow

        # Keep runner active indefinitely (or until manually cancelled)
        $startTime = Get-Date
        while ($true) {
            $elapsed = (Get-Date) - $startTime
            $hours = [math]::Floor($elapsed.TotalHours)
            $minutes = $elapsed.Minutes
            
            Write-Host "[$(Get-Date)] RDP Active - Elapsed: ${hours}h ${minutes}m - Use Ctrl+C in workflow to terminate" -ForegroundColor Gray
            Start-Sleep -Seconds 300
        }

        Write-Host "==================================================" -ForegroundColor Cyan
        Write-Host "🎉 ULTIMATE RDP DEPLOYMENT COMPLETED SUCCESSFULLY! 🎉" -ForegroundColor Yellow
        Write-Host "==================================================" -ForegroundColor Cyan
        Write-Host "👨‍💻 Created by: Vayvy" -ForegroundColor Green
        Write-Host "🕒 Completion Time: $(Get-Date)" -ForegroundColor Green
        Write-Host "🔗 Tailscale IP: $env:TAILSCALE_IP" -ForegroundColor Green
        Write-Host "👤 Username: $env:RDP_USERNAME" -ForegroundColor Green
        Write-Host "⏰ Session Duration: $env:KEEP_ALIVE_MINUTES minutes" -ForegroundColor Green
        Write-Host "==================================================" -ForegroundColor Cyan
